<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steve Tooke</title>
  <id>http://tooky.co.uk/</id>
  <link href="http://tooky.co.uk/"/>
  <link href="http://tooky.co.uk/feed.xml" rel="self"/>
  <updated>2014-05-21T00:00:00Z</updated>
  <entry>
    <title>Kickstart Academy Podcast with Sandi Metz</title>
    <link rel="alternate" href="http://tooky.co.uk/kickstart-academy-podcast-with-sandi-metz/"/>
    <id>http://tooky.co.uk/kickstart-academy-podcast-with-sandi-metz/</id>
    <published>2014-05-21T00:00:00Z</published>
    <updated>2014-05-21T16:16:29+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/mattwynne"&gt;Matt&lt;/a&gt;, &lt;a href="https://twitter.com/chrismdp"&gt;Chris&lt;/a&gt; and &lt;a href="https://twitter.com/tooky"&gt;I&lt;/a&gt; were joined yesterday by &lt;a href="https://twitter.com/sandimetz"&gt;Sandi
Metz&lt;/a&gt; for a live google hangout.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/u-d2v_8YYw4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can &lt;a href="https://dl.dropboxusercontent.com/u/41915/kickstart-academy-podcast/001-sandi-metz.mp3"&gt;download an audio only version of the podcsast
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to thank Sandi for giving us her time and her insight!&lt;/p&gt;

&lt;p&gt;We would love to hear any thoughts you have about the show - either about the
content or the format. We&amp;rsquo;re planning to do a live show about once a month, so
if there&amp;rsquo;s anyone you&amp;rsquo;d like us to talk to, or any topics you&amp;rsquo;d like us to cover
please let us know.&lt;/p&gt;

&lt;p&gt;You can email us at &lt;a href="mailto:hello@bddkickstart.com"&gt;hello@bddkickstart.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Show notes&lt;/h2&gt;

&lt;p&gt;We all had a lot of fun and covered quite a few topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/makaroni4/sandi_meter"&gt;The Sandi Meter&lt;/a&gt; and the (don&amp;rsquo;t call them the) &amp;ldquo;Sandi Metz&amp;rdquo; rules&lt;/li&gt;
&lt;li&gt;Small Things&lt;/li&gt;
&lt;li&gt;Letting go of the big picture&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Everything I know now I cargo culted&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Finding the sweet spot between extremes&lt;/li&gt;
&lt;li&gt;Experimenting&lt;/li&gt;
&lt;li&gt;Object-oriented thinking&lt;/li&gt;
&lt;li&gt;Rails and frameworks&lt;/li&gt;
&lt;li&gt;Testability

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tomstuart"&gt;Tom Stuart&lt;/a&gt; - &lt;a href="http://codon.com/how-testability-can-help"&gt;How testability can help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Focus on the messages&lt;/li&gt;
&lt;li&gt;Starting at the whiteboard&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not &lt;a href="http://geepawhill.org/?p=47"&gt;TDYAR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;End-to-end testing vs isolated testing&lt;/li&gt;
&lt;li&gt;Testing at different levels of granularity&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.thecodewhisperer.com/2014/05/14/the-curious-case-of-tautological-tdd/"&gt;Tautological TDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TDD and driving desing&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Confidence&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kickstartacademy.io/courses/practical-object-oriented-design"&gt;#POODL&lt;/a&gt; - Practical Object Oriented Design classes with Sandi and
Matt in London&lt;/li&gt;
&lt;li&gt;Integration tests and testing roles&lt;/li&gt;
&lt;li&gt;Functional vs Object Oriented

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://elixir-lang.org/"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Microservices Architecture

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fgeorge52"&gt;Fred George&lt;/a&gt; on &lt;a href="http://oredev.org/2013/wed-fri-conference/implementing-micro-service-architectures"&gt;Microservices Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Readable code&lt;/li&gt;
&lt;li&gt;Imperative vs Declarative approach&lt;/li&gt;
&lt;li&gt;Tell Don&amp;rsquo;t Ask - What Not How&lt;/li&gt;
&lt;li&gt;&lt;a href="http://signup.practicalrailsbook.com/?lrRef=Ejvoln"&gt;Practical Rails Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;99 Bottles of Beer&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimeo.com/26330100"&gt;T R U E&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/unclebobmartin"&gt;Uncle Bob Martin&lt;/a&gt; - &lt;a href="http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf"&gt;Symptoms of Rotting Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Exemplary Code&lt;/li&gt;
&lt;li&gt;The pattern failed me

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=x1wnI0AxpEU"&gt;All the little things keynote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gilded rose kata&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code Metrics

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/seattlerb/flog"&gt;Flog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeclimate.com/"&gt;Code Climate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Hangout with Matt Wynne and Aslak Hellesøy</title>
    <link rel="alternate" href="http://tooky.co.uk/hangout-with-matt-wynne-and-aslak-hellesoy/"/>
    <id>http://tooky.co.uk/hangout-with-matt-wynne-and-aslak-hellesoy/</id>
    <published>2014-05-16T15:11:00Z</published>
    <updated>2014-05-16T16:19:05+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago Matt, Aslak and I held a live google hangout. Today I realised
that I hadn&amp;rsquo;t mentioned it here. If you haven&amp;rsquo;t seen it yet you can watch it
here:&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/P6znT1H04PE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;d love to hear what you thought about it, and what we can do better next time
&amp;mdash; especially as next time is this Monday, and we&amp;rsquo;ll be joined by &lt;a href="http://www.sandimetz.com"&gt;Sandi
Metz&lt;/a&gt; to talk about object-oriented design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://plus.google.com/b/112947453773806733442/events/ck08u3ha70spbk5p467j2ip5sgs"&gt;Kickstart Academy Hangout with Sandi Metz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the hangout format means that we can include screensharing, code and most
importantly your contributions! Please let us know what you&amp;rsquo;d like to hear us
discuss.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Cucumber Test Trap</title>
    <link rel="alternate" href="http://tooky.co.uk/the-cucumber-test-trap/"/>
    <id>http://tooky.co.uk/the-cucumber-test-trap/</id>
    <published>2014-03-29T00:00:00Z</published>
    <updated>2014-04-03T11:55:02+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/aslak_hellesoy"&gt;Aslak Hellesøy&lt;/a&gt; recently wrote how cucumber is &amp;ldquo;&lt;a href="https://cucumber.pro/blog/2014/03/03/the-worlds-most-misunderstood-collaboration-tool.html"&gt;the world&amp;rsquo;s most
misunderstood collaboration tool&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cucumber was born out of the frustration with ambiguous requirements and
misunderstandings between the people who order the software and those who
deliver it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anybody who has spent time with more than a few codebases that use cucumber will
probably recognise Aslak&amp;rsquo;s description of a cucumber anti-pattern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When Cucumber is adopted solely as a tool to write automated tests without
any input from business analysts they tend to become imperative and lose
their documentation value.&lt;/p&gt;

&lt;p&gt;This also makes them slow and brittle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This doesn&amp;rsquo;t tell the whole story though - there are many teams that work with
the business to define their scenarios, that make an effort to write declarative
scenarios - yet some of these teams still suffer from slow and brittle builds.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;ve fallen into the cucumber test trap - they want to document everything
the system does and automatically check it using cucumber.&lt;/p&gt;

&lt;p&gt;As they start building their system the automated cucumber suite gives them
the confidence that everything is working. Running the features is quick and
their system is simple. As they add behaviour to the system they diligently
document the behaviour in gherkin and automate it with cucumber. All of the
while running every scenario from end-to-end through their entire stack.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://pragprog.com/book/hwcuc/the-cucumber-book"&gt;The Cucumber Book&lt;/a&gt; (&lt;em&gt;When Cucumbers Go Bad&lt;/em&gt; p. 103), &lt;a href="https://twitter.com/mattwynne"&gt;Matt
Wynne&lt;/a&gt; and Aslak describe one of the main causes for &amp;ldquo;&lt;em&gt;Slow Features&lt;/em&gt;&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lots of Scenarios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might seem like stating the obvious, but having a lot of scenarios is by
far the easiest way to give yourself a slow overall feature run. We&amp;rsquo;re not
trying to suggest you give up on BDD and go back to cowboy coding, but we do
suggest you treat a slow feature run as a red flag. Having lots of tests has
other disadvantages than just waiting a long time for feedback. It&amp;rsquo;s hard
to keep a large set of features organized, making them awkward for readers
to navigate around. Maintenance is also harder on the underlying step
definitions and support code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course this isn&amp;rsquo;t really a product of using cucumber, or even trying to get
started with BDD or Specification by Example. It&amp;rsquo;s exactly the same problem that
&lt;a href="https://twitter.com/jbrains/"&gt;J. B. Rainsberger&lt;/a&gt; describes when he says that &amp;ldquo;&lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;integrated tests
are a scam&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You write integrated tests because you can&amp;rsquo;t write perfect unit tests. You
know this problem: all your unit tests pass, but someone finds a defect
anyway.  Sometimes you can explain this by finding an obvious unit test you
simply missed, but sometimes you can&amp;rsquo;t. In those cases, you decide you need
to write an integrated test to make sure that all the production
implementations you use in the broken code path now work correctly together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As soon as you make a decision that you will describe everything your system
does using cucumber features you&amp;rsquo;ve left BDD behind, fallen into the cucumber
test trap and are destined to have &amp;ldquo;&lt;em&gt;Lots of Scenarios&lt;/em&gt;&amp;rdquo;. J. B.
&lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;describes&lt;/a&gt; this brilliantly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have a medium-sized web application with around 20 pages, maybe 10 of
which have forms. Each form has an average of 5 fields and the average field
needs 3 tests to verify thoroughly. Your architecture has about 10 layers,
including web presentation widgets, web presentation pages, abstract
presentation, an HTTP bridge to your service API, controllers, transaction
scripts, abstract data repositories, data repository implementations, SQL
statement mapping, SQL execution, and application configuration. A typical
request/response cycle creates a stack trace 30 frames deep, some of which
you wrote, and some of which you&amp;rsquo;ve taken off the shelf from a wide variety
of open source and commercial packages. How many tests do you need to test
this application thoroughly?&lt;/p&gt;

&lt;p&gt;At least 10,000. Maybe a million. One million.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;One million&lt;/em&gt; scenarios - even &lt;em&gt;10,000&lt;/em&gt; scenarios - to thoroughly check &amp;ldquo;a
medium sized web application&amp;rdquo; using cucumber. All of them running end-to-end. No
wonder teams have &amp;ldquo;&lt;em&gt;Slow Features&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Avoiding the cucumber test trap is hard. It&amp;rsquo;s easy to keep adding scenarios
which give you a false confidence that your application is working correctly.
It&amp;rsquo;s easy to just add some more code to make those scenarios pass.&lt;/p&gt;

&lt;p&gt;Instead we need to keep &lt;a href="http://lizkeogh.com/2011/09/22/conversational-patterns-in-bdd/"&gt;focusing on the conversations&lt;/a&gt;. Find the
scenarios that matter, that are important to document, that are worth automating
and push everything else down into lower level, isolated tests.&lt;/p&gt;

&lt;p&gt;Define contracts between layers, and test those exhaustively. Allow the design
pressure of creating testable code help you to build a cleaner, maintainable
application. This will help you prevent another one of the main causes of &amp;ldquo;&lt;em&gt;Slow
Features&lt;/em&gt;&amp;rdquo; that Matt and Aslak describe in The Cucumber Book.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Big Ball of Mud&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Big Ball of Mud is an ironic name given to the type of software design
you see when nobody has really made much effort to actually do any software
design. In other words, it&amp;rsquo;s a big, tangled mess.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the &lt;a href="http://www.meetup.com/Extreme-Programmers-London/"&gt;Extreme Programmers London&lt;/a&gt; meetup last week &lt;a href="https://twitter.com/keithb_b"&gt;Keith
Braithwaite&lt;/a&gt; talked about code metrics and the effect that
unit-testing has on the distribution of complexity in the codebase. During the
talk he mentioned that he thought the part of the TDD cycle that has the biggest
effect on the software design is when you have to add the next test, because we
often have to refactor our code to support adding the next test - to make it
testable.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://www.growing-object-oriented-software.com"&gt;Growing Object Oriented Software, Guided by Tests&lt;/a&gt; (&lt;em&gt;What Is the Point
of Test-Driven Development&lt;/em&gt;), &lt;a href="https://twitter.com/sf105"&gt;Steve Freeman&lt;/a&gt; and &lt;a href="https://twitter.com/natpryce"&gt;Nat Pryce&lt;/a&gt;
describe why testable code &lt;em&gt;is&lt;/em&gt; well designed code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thorough unit testing helps us to improve the internal quality because, to
be tested, a unit has to be structured to run outside the system in a test
fixture. A unit test for an object needs to create the object, provide its
dependencies, interact with it, and check that it behaved as expected. So,
for a class to be easy to unit-test, the class must have explicit
dependencies that can easily be substituted and clear responsibilities that
can easily be invoked and verified. In software engineering terms, that
means that the code must be &lt;em&gt;loosely coupled&lt;/em&gt; and &lt;em&gt;highly cohesive&lt;/em&gt; - in
other words, well designed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By falling into the cucumber test trap and relying on checking the system
end-to-end you lose this valuable design pressure that comes from TDD. You have
no need to make your units testable in isolation, because it&amp;rsquo;s &lt;em&gt;easy&lt;/em&gt; to add
another test that runs from outside of the application. Which means you have
nothing pushing you to improve the internal quality of the codebase, nothing to
help you avoid creating a &lt;em&gt;Big Ball of Mud&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Writing scenarios &lt;em&gt;with your customers&lt;/em&gt; will help you to understand what your
application needs to do, and automating those scenarios with cucumber will help
you to know when the application meets those needs. Just don&amp;rsquo;t fall into the
trap of thinking you can use cucumber to test the app completely at the expense
of unit tests or &lt;em&gt;Lots of Scenarios&lt;/em&gt; and a &lt;em&gt;Big Ball of Mud&lt;/em&gt; will be your
reward.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Discovering BDD</title>
    <link rel="alternate" href="http://tooky.co.uk/discovering-bdd/"/>
    <id>http://tooky.co.uk/discovering-bdd/</id>
    <published>2013-12-11T00:00:00Z</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I graduated from UMIST in 2002 with a Software Engineering degree, and I started work with a company who provided document scanning services, mostly to the public sector - NHS trusts and local authorities. I came into the company thinking I knew it all - I had a software engineering degreee!&lt;/p&gt;

&lt;p&gt;Wow - I had a &lt;em&gt;LOT&lt;/em&gt; to learn!&lt;/p&gt;

&lt;p&gt;I met Shane Paterson while I was there. Shane was another developer at the company, and even though he was based in New Zealand, he was responsible for pointing me in the direction of XP and TDD. There&amp;rsquo;s some more about this story in the &lt;a href="http://chimera.labs.oreilly.com/books/1234000001813/ch04.html#solution_id19"&gt;Apprenticeship Patterns&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;I started reading a lot of blogs and participating in the various mailing lists. I found an &lt;a href="http://groups.yahoo.com/neo/groups/extremeprogramming/conversations/messages/116122"&gt;old post&lt;/a&gt; on the XP mailing list where I was introducing a colleague to TDD using the bowling game kata which made me smile as I used the same exercise during some recent ruby/tdd training.&lt;/p&gt;

&lt;p&gt;This colleague and I were about to start working on the new version of our main software application. A decision had been taken to rewrite the application with a completely new look and feel, to move to the new (at the time) .NET technology stack and to support MS SQL server as well as MS Access. The company had great success with application up until then because it could be set up and installed by anyone with file sharing permissions, so no need to involve corporate IT. This kind of culture was coming to an end though, so we needed to fit in with what the IT departments demanded.&lt;/p&gt;

&lt;p&gt;We ran it as close to a proper XP project as the business would allow. In particular we were pair programming and we were writing our tests first! Not just unit tests, we were also writing acceptance tests with our &amp;lsquo;customer&amp;rsquo; to help us understand the requirements.&lt;/p&gt;

&lt;p&gt;We used a tool called &lt;a href="http://en.wikipedia.org/wiki/Framework_for_Integrated_Test"&gt;FIT&lt;/a&gt;. This allowed us to create word documents (!!) that contained tables of examples of what the software should do. We would then hook these tables up to some test classes which would run the tests and colour the tables appropriately.&lt;/p&gt;

&lt;p&gt;Using tables to describe the requirements was fantastic. We were able to communicate clearly with our project sponsors about the business rules, using concrete examples to support our understanding.&lt;/p&gt;

&lt;p&gt;Brian Marick&amp;rsquo;s foreword from the book really sums up what the FIT community were trying to do:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A software project is a place where different cultures come together. Some people face towards the business and its concerns; other people face toward the computer and its demands.&lt;/p&gt;

&lt;p&gt;To an expert in financial trading, a &amp;ldquo;bond&amp;rdquo; is something that&amp;rsquo;s tangled up in all sorts of explicit and implicit legal, social, historical and emotional meanings.&lt;/p&gt;

&lt;p&gt;To programmers, a Bond is an object in their program that they&amp;rsquo;re trying to keep from getting too tangled up with other objects, lest their brains explode.&lt;/p&gt;

&lt;p&gt;Somehow these people have to work together, and they do it by creating a shared language. Most of that creating happens through the conversation that threads through the whole project. But some of it happens through writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian Marick, Feb 2005 (foreword of &lt;a href="http://www.pearsoned.co.uk/bookshop/detail.asp?item=100000000079971"&gt;Fit for Developing Software&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At about the same time as this I came across the term &lt;em&gt;Behaviour Driven Development&lt;/em&gt; in &lt;a href="http://blog.daveastels.com/2005/07/a-new-look-at-test-driven-development/"&gt;this post&lt;/a&gt; by Dave Astels. It was about trying to change the focus of TDD from testing to specifying behaviour.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The problem I have with TDD is that its mindset takes us in a different direction… a wrong direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to start thinking in terms of behavior specifications, not verification tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The value of doing this will be thinking more clearly about each behaviour, relying less on testing by class or by method, and having better executable documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since TDD is what it is, and everyone isn’t about to change their meaning of that name (nor should we expect them to), we need a new name for this new way of working… BDD: Behaviour Driven Development.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post really struck a chord with me. I was still getting to grips with TDD but when it had worked well for me it was when I was working how Dave described. The timing of this is a little fuzzy for me now, but it was right around the time I first started to use Ruby and Rails, so I picked up RSpec as my testing tool of choice.&lt;/p&gt;

&lt;p&gt;The FIT toolchain didn&amp;rsquo;t exist in ruby, but in August 2007 the &lt;a href="http://rubyforge.org/pipermail/rspec-devel/2007-August/003756.html"&gt;RSpec Story Runner was released&lt;/a&gt; which gave us the tools to do similar things in ruby. The story runner gave way to &lt;a href="http://cukes.info/"&gt;cucumber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cucumber and Gherkin (the formal language for writing cucumber specifcations), have spread. It is now possible to write Gherkin specifications &lt;a href="https://github.com/cucumber/cucumber-jvm"&gt;on&lt;/a&gt; &lt;a href="https://github.com/cucumber/cucumber-js"&gt;a&lt;/a&gt; &lt;a href="http://www.specflow.org/"&gt;huge&lt;/a&gt; &lt;a href="https://github.com/cucumber/cucumber-cpp"&gt;range&lt;/a&gt; &lt;a href="http://behat.org/"&gt;of&lt;/a&gt; &lt;a href="https://github.com/gabrielfalcao/lettuce"&gt;platforms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think I made a mistake using these tools that many people have done. I used them to write tests. Sometimes they were very brittle tests, &lt;a href="http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/"&gt;overly focussed on the view&lt;/a&gt;. Often they were boring lists of instructions. I learnt to be more &lt;a href="http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html"&gt;declarative&lt;/a&gt;, and my tests became more readable. But&amp;hellip;&lt;/p&gt;

&lt;p&gt;They were still written as tests by me (and my colleagues) for the computer to run. &lt;a href="http://lizkeogh.com/2011/03/04/step-away-from-the-tools/"&gt;BDD isn&amp;rsquo;t about the tools&lt;/a&gt; its about the &lt;a href="http://dannorth.net/2010/08/30/introducing-deliberate-discovery/"&gt;discovery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;BDD enables communication. Our teams are made up of those who need the capabilities some new software will provide, and those who are able to create that software. These people come from different backgrounds, different experiences. Using stories and examples helps to create a shared language which we can then use to explore the problem space and begin to discover the things we don&amp;rsquo;t know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Learning by Teaching</title>
    <link rel="alternate" href="http://tooky.co.uk/learning-by-teaching/"/>
    <id>http://tooky.co.uk/learning-by-teaching/</id>
    <published>2013-11-06T00:00:00Z</published>
    <updated>2013-12-18T12:36:38+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;For the last few weeks I&amp;rsquo;ve been working with &lt;a href="http://kickstartacademy.io/"&gt;Kickstart Academy&lt;/a&gt; teaching the &lt;a href="https://www.onthebeach.co.uk/"&gt;On The Beach&lt;/a&gt; ruby academy. We&amp;rsquo;ve been introducing a group of graduate and experienced developers to software development using ruby, bdd and git. Much of the teaching in the academy was based on ideas from &lt;a href="http://www.bowperson.com/books.htm"&gt;Training from the Back of the Room&lt;/a&gt; by Sharon Bowman and I wanted to share one of the exercises that we ran.&lt;/p&gt;

&lt;p&gt;Bowman&amp;rsquo;s book has had quite an influence on the way that I approach training. The book focuses on leaving behind traditional training methods where learners are a passive audience as the trainer pushes information through lectures and slides. Instead, Bowman suggests that trainers should try to connect learners to past experiences, use shorter presented segments, and focus on giving learners lots of oppurtunity for concrete practice through exercises and activities.&lt;/p&gt;

&lt;p&gt;Another major theme in the book is the idea that trainers should &amp;ldquo;step aside&amp;rdquo; and let the learners teach and learn from each other. This really stood out to me as I have found that whenever I&amp;rsquo;m teaching something to someone else, it helps me understand it more.&lt;/p&gt;

&lt;p&gt;We set the group a task to go and spend some time researching the &lt;a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)"&gt;SOLID principles&lt;/a&gt;. They worked in twos or threes and each group took one of the principles.&lt;/p&gt;

&lt;p&gt;We gave them 45 minutes to produce a poster about the principle before we got back together and presented back to the group. Each group had the chance to think about their principle and how it affected some of the things we&amp;rsquo;d been working on. After each presentation we had a group discussion about the benefits and drawbacks that following the principle presented. Working through them together made the connections between the principles obvious.&lt;/p&gt;

&lt;p&gt;This exercise, it&amp;rsquo;s output and the discussion between the learners really highlighted to me the role of a trainer. As a trainer we aren&amp;rsquo;t there to teach, or to talk at learners. We are trying to facilitate learning. We want to create an environment where the learners are able to discover ideas and try them out for themselves, offering guidance and help when they are stuck. Not only does this make the training more interesting and relevant for the learners, but it makes it more satisfying to teach. You get fast feedback about how the group are doing, and what topics you might need to spend more time on.&lt;/p&gt;

&lt;p&gt;Here are the posters the group created.&lt;/p&gt;

&lt;h3&gt;Single Responsibility Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Single Responsibility Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/single-responsibility.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Open-Closed Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Open-Closed Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/open-closed.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Liskov Substitution Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Liskov Substitution Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/liskov-substitution.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Interface Segregation Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Interface Segregation Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/interface-segregation.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Dependency Inversion Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Dependency Inversion Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/dependency-inversion.jpg" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stop Writing Scenarios That Test Everything Through The View</title>
    <link rel="alternate" href="http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/"/>
    <id>http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/</id>
    <published>2013-10-29T00:00:00Z</published>
    <updated>2013-12-18T10:30:28+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Following on from my &lt;a href="http://tooky.co.uk/this-gherkins-not-for-reading/"&gt;last post&lt;/a&gt;, I wanted to mention a common anti-pattern that &lt;a href="http://blog.8thlight.com/kevin-liddle/2013/09/18/a-case-against-cucumber.html"&gt;Kevin&amp;rsquo;s case against cucumber&lt;/a&gt; mentioned. Scenarios that are too focussed on the user interface. Scenarios written as an imperative set of instructions for a machine to follow.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Scenarios like this.&lt;/p&gt;
&lt;pre class="highlight gherkin"&gt;&lt;span class="nf"&gt;Given&lt;/span&gt; I go to the homepage
&lt;span class="nf"&gt;And&lt;/span&gt; I fill in my username
&lt;span class="nf"&gt;And&lt;/span&gt; I click sign in
&lt;span class="nf"&gt;When&lt;/span&gt; I click &lt;span class="s"&gt;"Accounts"&lt;/span&gt;
&lt;span class="nf"&gt;Then&lt;/span&gt; I see &lt;span class="s"&gt;"Current Account"&lt;/span&gt;
&lt;span class="nf"&gt;And&lt;/span&gt; I see &lt;span class="s"&gt;"Savings Account"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There has been quite a lot written about this, the &lt;a href="http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html"&gt;canonical post&lt;/a&gt; is from 2008. The cucumber team made a mistake including &lt;code&gt;web_steps.rb&lt;/code&gt; - they were &lt;a href="https://github.com/cucumber/cucumber-rails/commit/f027440965b96b780e84e50dd47203a2838e8d7d"&gt;removed&lt;/a&gt; 2 years ago.&lt;/p&gt;

&lt;p&gt;The problem here isn&amp;rsquo;t just isolated to the imperative style of this scenario, but also that the scenario is highly coupled to the view.&lt;/p&gt;

&lt;p&gt;Testing through the view is something you have to be wary of with any tool. It&amp;rsquo;s slow and brittle. That isn&amp;rsquo;t to say it has no value, but you don&amp;rsquo;t need every test to go through the UI. Beware the &lt;a href="http://watirmelon.com/2012/01/31/introducing-the-software-testing-ice-cream-cone/"&gt;ice cream cone&lt;/a&gt; anti-pattern.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve written a little more about this &lt;a href="http://tooky.co.uk/cucumber-and-full-stack-testing/"&gt;here&lt;/a&gt;, Seb has introduced the &lt;a href="http://claysnow.co.uk/the-testing-iceberg/"&gt;Testing Iceberg&lt;/a&gt; and &lt;a href="http://mattwynne.net"&gt;Matt&lt;/a&gt; talks more about it &lt;a href="http://skillsmatter.com/podcast/agile-testing/why-your-step-definitions-should-be-one-liners-and-other-pro-tips"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
