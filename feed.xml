<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steve Tooke</title>
  <id>http://tooky.co.uk/</id>
  <link href="http://tooky.co.uk/"/>
  <link href="http://tooky.co.uk/feed.xml" rel="self"/>
  <updated>2015-12-01T00:00:00+00:00</updated>
  <entry>
    <title>The Mob Rules, ok?</title>
    <link rel="alternate" href="http://tooky.co.uk/the-mob-rules-ok/"/>
    <id>http://tooky.co.uk/the-mob-rules-ok/</id>
    <published>2015-12-01T00:00:00+00:00</published>
    <updated>2015-12-01T06:27:49+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;During the last 6 weeks or so, I&amp;rsquo;ve had the pleasure to be working on &lt;a href="https://cucumber.io/pro"&gt;Cucumber
Pro&lt;/a&gt; with the team at &lt;a href="https://cucumber.io/"&gt;Cucumber
Limited&lt;/a&gt;. One of the key thing making this such a good
experience has been the way we&amp;rsquo;ve been working. Mob Programming.&lt;/p&gt;

&lt;h2&gt;What is Mob Programming?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;All the brilliant people working on the same thing, at the same time, in the
same space, and on the same computer &amp;mdash; &lt;a href="https://twitter.com/woodyzuill"&gt;@woodyzuill&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mob Programming is a term coined by Woody Zuill. It describes a practice that he
and his team &amp;ldquo;discovered&amp;rdquo; while he was coaching at Hunter Industries. It&amp;rsquo;s a way
of working where the whole team gather around a single computer and work on
a single problem together. The team take turns to &amp;ldquo;drive&amp;rdquo; the computer, while
the other members of the team help to think through the problem and find
solutions.&lt;/p&gt;

&lt;h2&gt;A Remote Mob&lt;/h2&gt;

&lt;p&gt;The Cucumber Pro team works remotely. We are geographically distributed
(although we are usually in similar timezones). Obviously this makes sharing
a computer more of a challenge, but we&amp;rsquo;ve found a couple of solutions that are
working well for us.&lt;/p&gt;

&lt;p&gt;The first thing is that the person driving always works on their computer. This
allows everyone to use the tools they are most comfortable with and saves them
from them having to deal with lag or other connection problems on input.&lt;/p&gt;

&lt;p&gt;To share the driver&amp;rsquo;s computer with the rest of the team we have mostly used
&lt;a href="https://screenhero.com/"&gt;Screenhero&lt;/a&gt;. Screenhero allows us to share a single
computer with several other participants (I think we&amp;rsquo;ve had up to 5 or 6).
Unlike other screensharing technology it also gives each user a mouse pointer.
This is &lt;em&gt;especially&lt;/em&gt; useful when trying to point out where that misspelt
variable is hiding. Screenhero also allows the navigators to type, which helps
from time to time.&lt;/p&gt;

&lt;p&gt;While Screenhero does provide a voice channel, we generally prefer to use
&lt;a href="https://hangouts.google.com/"&gt;Google Hangouts&lt;/a&gt; for voice and video. Partly
because the sound is better, but really because being able to see each other is
great!&lt;/p&gt;

&lt;p&gt;We haven&amp;rsquo;t found a really good solution for a shared whiteboard yet. Most of the
drawing we&amp;rsquo;ve done has been on paper and shared with photographs. We&amp;rsquo;ve also
experimented with an &lt;a href="http://www.ipevo.com/prods/Point-2-View-USB-Camera"&gt;iPEVO
camera&lt;/a&gt;. This lets you share
a drawing live as it happens. We&amp;rsquo;ve used it point to paper on the desktop, and
with a whiteboard. This is a bit more of an interactive experience, but it still
only allows one person to draw.&lt;/p&gt;

&lt;h2&gt;Mornings only&lt;/h2&gt;

&lt;p&gt;We decided that the Cucumber Pro mob would only convene in the mornings. This
gives us 3.5 focussed hours where we all work together. These morning mob
sessions are where we take design decisions. We discuss the work that&amp;rsquo;s to be
done.  Talk through the business, and find examples that we can use to
illustrate them in our Cucumber features. Its also in these sessions that we
write most of the code.&lt;/p&gt;

&lt;p&gt;Afternoons are more free-form. For a start everyone in the team has other
responsibilities. So this leaves space for this work. Dealing with email,
running a business, open-source, etc.&lt;/p&gt;

&lt;p&gt;But&amp;hellip; it also leaves space for people to think, to read, to experiment, to fix
little niggles, to automate tiresome tasks. This space is &lt;em&gt;invaluable&lt;/em&gt;. We
liberally use TODOs while we are mobbing. We use them in the same way we might
note something we want to address later on an index card. Fixing TODOs in the
afternoon has been quite common. Sometimes this is just tidying up and getting
work out of the way, so the mob can focus on bigger tasks. Sometimes this is
a spike to try out some idea before presenting it back to the mob.&lt;/p&gt;

&lt;h2&gt;Pull requests&lt;/h2&gt;

&lt;p&gt;We use &lt;a href="https://github.com"&gt;Github&amp;rsquo;s&lt;/a&gt; &lt;a href="https://help.github.com/articles/using-pull-requests/"&gt;pull
requests&lt;/a&gt; in a couple of
different ways. Firstly, any work that people undertake outside of the mob (in
the afternoon), is almost always done on a pull-request. This allows us to use
GitHub as the communication channel about the code, and it means that work that
is done indivdually is seen by someone else before its merged.&lt;/p&gt;

&lt;p&gt;We have also been using pull requests for work-in-progress. Not everyone on the
Cucumber Pro team is available everyday. There&amp;rsquo;s often someone away delivering
training or consulting, or at a conference. Again pull requests let us use
Github&amp;rsquo;s great tooling for seeing changes to the code over time, and having
asynchronous discussions with those who weren&amp;rsquo;t able to join the mob.&lt;/p&gt;

&lt;h2&gt;Daily retrospective&lt;/h2&gt;

&lt;p&gt;We end every mob session with a short retrospective. We ask ourselves two
questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What have we learnt?&lt;/li&gt;
&lt;li&gt;What puzzles us?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use this as a chance to reflect on the work we have done, and how things
went. We try to recognise things that have gone well so we can do more of them,
and recognise problems early so that we can head them off.&lt;/p&gt;

&lt;p&gt;We also spend a few minutes thinking about the next steps, where the mob&amp;rsquo;s focus
should go next.&lt;/p&gt;

&lt;p&gt;We write all of this up in a file at the root of the project and commit it to
the repository. This is helpful for the team members that weren&amp;rsquo;t in the mob
session. It helps to share what we&amp;rsquo;ve learnt and our questions with them. It
also marks where the mob finished that day.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re currently adding each retrospective at the top of a single file, and
maintaining a history. I&amp;rsquo;m confident that it will be useful to reflect back on
how our thoughts and feelings about the project change over time.&lt;/p&gt;

&lt;h2&gt;Joy&lt;/h2&gt;

&lt;p&gt;Mob programming is a great way to build a team. I feel that we get a real sense
that we&amp;rsquo;re working together towards a common goal. We solve problems together.
We learn together and we teach each other. By reflecting on each session, we
learn more about how each of us likes to work, and how we can all help each
other.&lt;/p&gt;

&lt;p&gt;The remote working lets us all be comfortable in our surroundings. We&amp;rsquo;ve had
&lt;a href="https://twitter.com/mattwynne"&gt;Matt&lt;/a&gt; join for a few hours while he&amp;rsquo;s been in
&lt;a href="https://cucumber.io/events/cukeup-australia-2015"&gt;Australia&lt;/a&gt;. The last couple
of days &lt;a href="https://twitter.com/aslak_hellesoy"&gt;Aslak&lt;/a&gt; has been in the mob, with
his new baby nestled in a sling &amp;mdash; there is something really calming about
hearing contented baby gurgles while your working.&lt;/p&gt;

&lt;p&gt;Remote collaboration is quite an intense way to work. I&amp;rsquo;ve done quite a lot of
remote pair programming and it can be quite draining. Keeping the afternoons
free really helps to combat this.&lt;/p&gt;

&lt;p&gt;Working in the mob everyday is fantastic. I look forward to them because their
fun, and I feel like we&amp;rsquo;re growing as a team every day &amp;mdash; but the afternoon
space is just as important.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hands-on With the Cucumber Events API</title>
    <link rel="alternate" href="http://tooky.co.uk/hands-on-with-cucumber-events-api/"/>
    <id>http://tooky.co.uk/hands-on-with-cucumber-events-api/</id>
    <published>2015-09-14T01:00:00+01:00</published>
    <updated>2015-09-14T17:18:37+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://cucumber.io/blog/2015/09/11/cucumber-2.1"&gt;Cucumber Ruby 2.1&lt;/a&gt; introduces the new &lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events"&gt;Events API&lt;/a&gt; &amp;mdash; a simple way to find out what&amp;rsquo;s happening while Cucumber runs your features. Events are read-only and simplify the process of writing formatters, and other output tools.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll illustate how to use the API with a worked example that streams Cucumber test results to a browser in real-time.&lt;/p&gt;

&lt;h2&gt;Can you give me an example?&lt;/h2&gt;

&lt;p&gt;As much as we love our console applications, we can get a much richer experience in a web browser. How could we get Cucumber to push information into a nice web UI, without losing the rich information available with the built-in formatters?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build a super-simple example using the Events API that uses a websocket to update a web page while cucumber is running.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s lots of ways to run a websocket server – a favourite of mine is to use &lt;a href="https://github.com/joewalnes/websocketd"&gt;&lt;code&gt;websocketd&lt;/code&gt;&lt;/a&gt; because it&amp;rsquo;s &lt;em&gt;super&lt;/em&gt; simple. Give it an executable that reads &lt;code&gt;STDIN&lt;/code&gt; and write &lt;code&gt;STDOUT&lt;/code&gt; and you&amp;rsquo;re done!&lt;/p&gt;

&lt;p&gt;For our very simple websocket reporter we are going to use a UNIX &lt;a href="https://en.wikipedia.org/wiki/Named_pipe"&gt;named pipe&lt;/a&gt; to push information out of our cucumber process. To get these events out onto a websocket we need a shell command that reads from a named pipe and echos back onto &lt;code&gt;STDOUT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subscriber.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;fifo_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"events"&lt;/span&gt;;

&lt;span class="o"&gt;[&lt;/span&gt; -p &lt;span class="nv"&gt;$fifo_name&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; mkfifo &lt;span class="nv"&gt;$fifo_name&lt;/span&gt;;

&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true
&lt;/span&gt;&lt;span class="k"&gt;do
  if &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;line &amp;lt;&lt;span class="nv"&gt;$fifo_name&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure the script is executable with &lt;code&gt;chmod +x subscriber.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you run it, it will create an &lt;code&gt;events&lt;/code&gt; named pipe if one doesn&amp;rsquo;t exist already, then wait until there is data on the pipe for it to read. We can see it in action by putting some data on to the pipe: &lt;code&gt;echo &amp;quot;hello, world&amp;quot; &amp;gt; events&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Writing Cucumber Events to the pipe&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start by asking cucumber to write messages to the pipe. Add the following to &lt;code&gt;features/support/env.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"events"&lt;/span&gt;
&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="sb"&gt;`mkfifo &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w+"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"started"&lt;/span&gt;

&lt;span class="nb"&gt;at_exit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"done"&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This doesn&amp;rsquo;t use the Events API yet, but we&amp;rsquo;ve got the plumbing in place now to write to the same named pipe as &lt;code&gt;subscriber.sh&lt;/code&gt; will read from. With &lt;code&gt;subscriber.sh&lt;/code&gt; up and running, you should be able to run cucumber and see &lt;code&gt;started&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt; output to the terminal by &lt;code&gt;subscriber.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For our simple web-browser cucumber reporter we want to show each step that cucumber runs, and its result. We want cucumber to tell us when it starts to execute, when it starts to run each step, when it finishes a step (and what the result was) and when it&amp;rsquo;s finished executing.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll send some formatted JSON that give us some information about the events:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"event"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"event_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;//information about the event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can modify &lt;code&gt;features/support/env.rb&lt;/code&gt; to give us the start and end events:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;

&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"events"&lt;/span&gt;
&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="sb"&gt;`mkfifo &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w+"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="s2"&gt;"started"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{}}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;at_exit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{}}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Cucumber Events API gives us access to what&amp;rsquo;s going on inside Cucumber while it&amp;rsquo;s running our features. We want to know when a step is going to be run, and what happened when it finished. Cucumber provides us the &lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/BeforeTestStep"&gt;&lt;code&gt;BeforeTestStep&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/AfterTestStep"&gt;&lt;code&gt;AfterTestStep&lt;/code&gt;&lt;/a&gt; events. To hear about these events we can use the cucumber &lt;code&gt;AfterConfiguration&lt;/code&gt; hook to get access to the current config, and add handlers for specific events with the &lt;code&gt;on_event&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;AfterConfiguration&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on_event&lt;/span&gt; &lt;span class="ss"&gt;:before_test_step&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on_event&lt;/span&gt; &lt;span class="ss"&gt;:after_test_step&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting this all together we can modify &lt;code&gt;features/support/env.rb&lt;/code&gt; to push these events out onto our named pipe too:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;

&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"events"&lt;/span&gt;
&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="sb"&gt;`mkfifo &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EVENT_PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w+"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="no"&gt;AfterConfiguration&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="s2"&gt;"started"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{}}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on_event&lt;/span&gt; &lt;span class="ss"&gt;:before_test_step&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="s2"&gt;"before_test_step"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on_event&lt;/span&gt; &lt;span class="ss"&gt;:after_test_step&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="s2"&gt;"after_test_step"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;result: &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;at_exit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{}}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you run Cucumber, with &lt;code&gt;subscriber.sh&lt;/code&gt; up and running you should see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ ./subscriber.sh
{"event":"started","data":{}}
{"event":"before_test_step","data":{}}
{"event":"after_test_step","data":{"result":"✓"}}
{"event":"before_test_step","data":{}}
{"event":"after_test_step","data":{"result":"✓"}}
{"event":"before_test_step","data":{}}
{"event":"after_test_step","data":{"result":"✓"}}
{"event":"before_test_step","data":{}}
{"event":"after_test_step","data":{"result":"✗"}}
{"event":"before_test_step","data":{}}
{"event":"after_test_step","data":{"result":"-"}}
{"event":"done","data":{}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Hooking up a WebSocket&lt;/h3&gt;

&lt;p&gt;Great! We&amp;rsquo;ve got Cucumber sending our events. We now want to get these events pushed into a web-page using a websocket.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;websocketd&lt;/code&gt; lets us hook our &lt;code&gt;subscriber.sh&lt;/code&gt; command up to a websocket. Let&amp;rsquo;s have a look at what happens using &lt;code&gt;websocketd&lt;/code&gt;&amp;rsquo;s &lt;code&gt;devconsole&lt;/code&gt; mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ websocketd --port=8080 --devconsole ./subscriber.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then point your browser to [http://localhost:8080] and you should see:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/websocketd-devconsole.png" /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the little &amp;ldquo;✔&amp;rdquo; in the top left will connect the &lt;code&gt;websocketd&lt;/code&gt;&amp;rsquo;s dev console to the running socket. Now if you &lt;code&gt;echo&lt;/code&gt; some text on to the named pipe, you will see it appear in the console on the web browser. Now running Cucumber again, you should see something like this in the web browser:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/websocketd-devconsole-cuke.png" /&gt;&lt;/p&gt;

&lt;h3&gt;WebSocket Cucumber&lt;/h3&gt;

&lt;p&gt;Finishing everything up, lets create a simple web-page that uses the websocket to get information from Cucumber as it&amp;rsquo;s running. Save this as &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight html"&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Cucumber Runner&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;disconnected&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"runner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;// helper function: log message to screen&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stepStarted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"runner"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;resultNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"span"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;resultNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stepResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;resultNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"runner"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;lastElementChild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;resultNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clearRunner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'runner'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;statusWaiting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"waiting"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;statusRunning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"running"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;statusDisconnected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"disconnected"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;statusWaiting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CucumberSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ws://localhost:8080/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callbacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'close'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onopen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cucumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CucumberSocket&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;statusWaiting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'close'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;statusDisconnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'started'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;statusRunning&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;clearRunner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'before_test_step'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;stepStarted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'after_test_step'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;stepResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;statusWaiting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;websocketd&lt;/code&gt;&amp;rsquo;s static site server we can get our little web page up and running: &lt;code&gt;websocketd --port=8080 --staticdir=. ./subscriber.sh&lt;/code&gt; and open &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;. Now running Cucumber should show you progress in the web page!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=-pI5WzHfvjw"&gt;&lt;img alt="Cucumber Websocket" src="/images/CucumberWebsocket.gif" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;What events are available?&lt;/h2&gt;

&lt;p&gt;Cucumber 2 introduced a new model for executing a set of features. Each scenario is now compiled into a suite of Test Cases, each made up of Test Steps. Test Steps include Before and After hooks. Cucumber fires the following 5 events based on that model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/BeforeTestCase"&gt;&lt;code&gt;BeforeTestCase&lt;/code&gt;&lt;/a&gt; – fired before a test case is executed&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/BeforeTestStep"&gt;&lt;code&gt;BeforeTestStep&lt;/code&gt;&lt;/a&gt; – fired before a test step is executed&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/StepMatch"&gt;&lt;code&gt;StepMatch&lt;/code&gt;&lt;/a&gt; – fired when a step is matched to a definition&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/AfterTestStep"&gt;&lt;code&gt;AfterTestStep&lt;/code&gt;&lt;/a&gt; – fired after each test step has been executed&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rubydoc.info/gems/cucumber/Cucumber/Events/AfterTestCase"&gt;&lt;code&gt;AfterTestCase&lt;/code&gt;&lt;/a&gt; – fired after a test case has finished executing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What can I use it for?&lt;/h2&gt;

&lt;p&gt;The Events API is there for getting information out of Cucumber. It&amp;rsquo;s going to be the best way to write new formatters in future &amp;mdash; the old formatter API will be removed in Cucumber 3.0. If you&amp;rsquo;re looking for a way to contribute to Cucumber then &lt;a href="https://github.com/cucumber/cucumber-ruby/issues/839"&gt;rewriting some of the old formatters&lt;/a&gt; to use the new events API would be a tremendous help.&lt;/p&gt;

&lt;p&gt;Any questions please come and join us on our &lt;a href="https://gitter.im/cucumber/chat"&gt;gitter channel&lt;/a&gt; or the &lt;a href="https://groups.google.com/forum/#!forum/cukes"&gt;mailing list&lt;/a&gt;. All the code for this blog post is &lt;a href="https://github.com/tooky/cucumber-events"&gt;available here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Your tests want you to change your design</title>
    <link rel="alternate" href="http://tooky.co.uk/your-tests-want-you-to-change-your-design/"/>
    <id>http://tooky.co.uk/your-tests-want-you-to-change-your-design/</id>
    <published>2014-12-19T00:00:00+00:00</published>
    <updated>2014-12-19T11:59:48+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I came across an interesting post by &lt;a href="https://twitter.com/brandonhilkert"&gt;Brandon Hilkert&lt;/a&gt; looking at &lt;a href="http://brandonhilkert.com/blog/a-ruby-refactor-exploring-dependency-injection-options/"&gt;the
differences between constructor and setter dependency injection&lt;/a&gt;. It&amp;rsquo;s
a great introduction to the differences between the two, and his example
illustrates them well. Please go and read it first.&lt;/p&gt;

&lt;p&gt;Brandon&amp;rsquo;s example gets started when he realises that the tests he wants to write
are difficult:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[A] thing that bothered me was the difficulty simulating different pricing
tiers and customer usage&amp;hellip;What if I wanted to change the ceiling of that
tier next month? I&amp;rsquo;d have to come in here and adjust the stats being created
until it totalled something above the adjustment. It just felt weird..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He uses this as an example of how we can use dependency injection to use
different collaborators in tests so we get more control over the context our
objects are running in.&lt;/p&gt;

&lt;p&gt;The solution he settles on is to use setter injection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;StripeEvent&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceCreated&lt;/span&gt;
    &lt;span class="kp"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:usage_service&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:payload&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;
        &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="n"&gt;additional_charges_in_cents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
      &lt;span class="no"&gt;Billing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;
      &lt;span class="n"&gt;usage_service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_30_days&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage_service&lt;/span&gt;
      &lt;span class="vi"&gt;@usage_service&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Billing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;stripe_id: &lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"customer"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He&amp;rsquo;s now able to take an initialized object and using the &lt;code&gt;attr_writer
:usage_service&lt;/code&gt; he can swap in a stub implementation of the usage service and
tightly control what is returned. It allows him to ignor the &lt;em&gt;incidental detail&lt;/em&gt;
of creating a &lt;code&gt;Stat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When tests are difficult to write they are a great indicator that there&amp;rsquo;s
something about our design that we should take another look at. I&amp;rsquo;m not sure
that adding the setter method really changes the design, it just hides a little
complexity when writing our tests.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the sequence diagram for the original code:&lt;/p&gt;

&lt;p&gt;&lt;img alt="original sequence" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/listening_to_tests_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Using the setter to inject a usage service shortcuts creating the usage service,
but is &lt;em&gt;only&lt;/em&gt; relevant in the tests &amp;mdash; in normal usage the design is
&lt;em&gt;exactly&lt;/em&gt; the same.&lt;/p&gt;

&lt;p&gt;&lt;img alt="setter sequence" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/listening_to_tests_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;The tests were hinting that we had too many responsibilities, but this sequence
diagram really highlights this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve a user&lt;/li&gt;
&lt;li&gt;Get the users usage for the last 30 days&lt;/li&gt;
&lt;li&gt;Get the billing tier for that usage&lt;/li&gt;
&lt;li&gt;Create an invoice item for the billing tier amount&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last one is the most important. We want to create an additional invoice item
for the user, based on their usage in the last 30 days., and 
sequence diagram looked something like:&lt;/p&gt;

&lt;p&gt;&lt;img alt="extracted dependencies sequence" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/listening_to_tests_3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Based on this idea I changed the tests to focus the object on the responsibility
we care about:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"creating an invoice"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"data"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"object"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"customer"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:level1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:tier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:additional_charges_in_cents&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:level2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:tier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:additional_charges_in_cents&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'adds invoice item based on usage'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:last_30_days_for_stripe_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
      &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="mi"&gt;1900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;StripeEvent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceCreated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'adds next level charge for usage'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:last_30_days_for_stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="mi"&gt;4900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;StripeEvent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceCreated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are injecting a new dependency, a &lt;code&gt;billing_tier_service&lt;/code&gt;. We&amp;rsquo;re imagining
that this dependency will take on the responsibility of giving us back the
correct billing tier for the customer that stripe has asked us for. Our tests
will just check we creating the InvoiceItem correctly, and the resulting code
is little simpler.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;StripeEvent&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceCreated&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:payload&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:billing_tier_service&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:some_sensible_default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
      &lt;span class="vi"&gt;@billing_tier_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
      &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="n"&gt;additional_charges_in_cents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
      &lt;span class="n"&gt;tier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_30_days_for_stripe_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;tier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stripe_id&lt;/span&gt;
      &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"customer"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this leaves us with more work to do. We will still need to build the
&lt;code&gt;billing_tier_service&lt;/code&gt;, to return the current tier for the customer. But this
should be simpler, and focus purely on which level is returned based on usage.&lt;/p&gt;

&lt;p&gt;The trade-off is that we now have to deal with more objects in our system, but
each responsibility is in a single place, and our tests are isolated from
incidental changes in other parts of the system, e.g. changing the tier pricing.&lt;/p&gt;

&lt;p&gt;Test driven development is about listening to your tests. When something is hard
to test it&amp;rsquo;s usually a good indicator that you should change something in your
design. Use it as an opportunity to reevaluate design &amp;mdash; and don&amp;rsquo;t be
afraid of breaking out some boxes and arrows on the whiteboard.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Test first diamonds</title>
    <link rel="alternate" href="http://tooky.co.uk/test-first-diamonds/"/>
    <id>http://tooky.co.uk/test-first-diamonds/</id>
    <published>2014-12-06T00:00:00+00:00</published>
    <updated>2014-12-06T21:55:05+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/sebrose"&gt;Seb&lt;/a&gt;&amp;rsquo;s recent post &lt;a href="http://claysnow.co.uk/recycling-tests-in-tdd/"&gt;Recycling tests in TDD&lt;/a&gt; introduced the
&amp;ldquo;Print Diamond&amp;rdquo; kata. This has provoked a flurry of interesting posts looking at
different approaches to solving it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Given a letter, print a diamond starting with 'A' with the supplied letter at the widest point.

For example: print-diamond 'C' prints

  A
 B B
C   C
 B B
  A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Thinking&lt;/em&gt; has been the theme that has dominated the posts others have published
while trying out this kata. &lt;a href="http://alistair.cockburn.us/Thinking+before+programming"&gt;Alistair Cockburn&lt;/a&gt; began by suggesting
that this kind of problem is ideal for thinking about the properties of the
problem, and then deriving the code as an exercise - although his approach is to
use tests to get him there. &lt;a href="http://ronjeffries.com/articles/diamond/diamond.html"&gt;Ron Jeffries&lt;/a&gt; and &lt;a href="http://blog.gdinwiddie.com/2014/11/30/another-approach-to-the-diamond-kata/"&gt;George Dinwiddie&lt;/a&gt;
both take an incremental TDD approach, although both are different.&lt;/p&gt;

&lt;p&gt;Luckily I&amp;rsquo;d had a go at this kata before reading any of the other posts. I say
lucky because I think having read all of the other posts I&amp;rsquo;d probably have done
something else. &lt;/p&gt;

&lt;p&gt;Ron and George both talk about thinking during their approach. I stepped through
printing &amp;lsquo;A&amp;rsquo;, then &amp;#39;B&amp;rsquo; and &amp;#39;C&amp;rsquo; without really thinking about the algorithm at
all. My first test looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPrintDiamond&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MiniTest&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TestCase&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;PrintDiamond&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_print_a&lt;/span&gt;
    &lt;span class="n"&gt;assert_equal&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I just took the easy way to make it pass:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PrintDiamond&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;
    &lt;span class="s1"&gt;'A'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not sure why I decided the interface would be a module that I mixed in, but
I think that&amp;rsquo;s incidental.&lt;/p&gt;

&lt;p&gt;My second and third tests followed a similar pattern, I&amp;rsquo;m going to put them both
here because there&amp;rsquo;s nothing interesting about them.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_print_b&lt;/span&gt;
  &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'B B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_equal&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_print_c&lt;/span&gt;
  &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'C   C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_equal&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I kept going with hard coding the answers, so the implementation for this was
pretty simple too.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PrintDiamond&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' A '&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C   C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'  A  '&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now I had tests that passed, but an implementation that wasn&amp;rsquo;t going to
scale. This is the point that Seb mentions in his post that we can see the code
is screaming for us to refactor. Seb points out that this is difficult, because
there is so much going on at this point that it&amp;rsquo;s hard to know where to start.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/sandimetz"&gt;Sandi Metz&lt;/a&gt; I&amp;rsquo;ve been trying recently to make lots of very
small refactorings. This is a great example of code that doesn&amp;rsquo;t quite look the
same, but definitely has a pattern. Rather than going straight for trying to fix
the problem, I wanted to expose the pattern. I want to extract the differences
so I can more clearly see where the lines are the same.&lt;/p&gt;

&lt;p&gt;I decided I wanted to focus on the &amp;ldquo;middle&amp;rdquo; of each row - the letters and the
spacing between them.&lt;/p&gt;

&lt;p&gt;I wrote a method that I thought would give me what I wanted:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="no"&gt;ALPHABET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="n"&gt;letter&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had a hunch that the spacing between the letters was the equivalent to the
index of that letter in the alphabet. There&amp;rsquo;s a special case for &amp;#39;A&amp;rsquo; as it&amp;rsquo;s the
only character that&amp;rsquo;s printed once, but I figured I would leave that for later.&lt;/p&gt;

&lt;p&gt;I then tried using this method in a single place:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;print_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C   C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I extended using it for each of the central rows - the rows that had no extra
spaces on the ends.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;print_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;' A '&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;' B B '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'  A  '&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh a test failed! My hunch was wrong about the internal padding, or I&amp;rsquo;d
miss-counted. &amp;#39;C&amp;rsquo; has 3 spaces between it, and yes the pattern is that the
internal padding is always an odd number.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
      &lt;span class="n"&gt;letter&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;internal_padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;internal_padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back to green. Now I was confident that this would work for all the other cases,
so I pushed on and used it throughout, and renamed the method to pad_inside.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PrintDiamond&lt;/span&gt;
  &lt;span class="no"&gt;ALPHABET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s2"&gt;"  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
      &lt;span class="n"&gt;letter&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;internal_padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;internal_padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing to tackle is the external padding. Again I started by writing the
code I thought might handle it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid_letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another hunch. The central row was never padded, and each other row the padding
increased by one. My simple finger-counting maths seemed to think this would
work. Let&amp;rsquo;s try it in one place and see how it goes:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
     &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;"  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  "&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok - something failed there&amp;hellip; Ahh, I&amp;rsquo;m returning an array, not the string
I need.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid_letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can now work through using this method throughout:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great - that works. I want to make a small refactoring to make all of the lines
look the same. The central line that uses &lt;code&gt;letter&lt;/code&gt; on each conditional is
perhaps masking the pattern a bit.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, now I want to remove the duplication inside one of the legs. I need some way
of stepping through from &lt;code&gt;A&lt;/code&gt; to the target letter, and then back to &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s another hunch! It&amp;rsquo;s a bit tricky because it uses the difference between
the ruby &lt;code&gt;..&lt;/code&gt; range operator, and the &lt;code&gt;...&lt;/code&gt; operator &amp;mdash; using &lt;code&gt;..&lt;/code&gt; means up
to and including, and &lt;code&gt;...&lt;/code&gt; means up to but not including. Let&amp;rsquo;s see if it works
&amp;mdash; I&amp;rsquo;ll just remove the old code for &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, so I can try the same for the &lt;code&gt;C&lt;/code&gt; branch.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! Time to remove the duplication and lose the &lt;code&gt;B&lt;/code&gt; branch.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still works - so I&amp;rsquo;m confident it will work for the &lt;code&gt;A&lt;/code&gt; branch too, so I&amp;rsquo;ll
remove the conditional altogether.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
  &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think this is a good point to talk about how this approach has differed from
the others. Like some of the other solutions I didn&amp;rsquo;t do very up front thinking,
but I didn&amp;rsquo;t really break the problem down. I just started to write code &amp;mdash;
I think Sandi Metz would call it &lt;a href="http://pawelduda.blogspot.co.uk/2014/06/practical-object-oriented-design-in.html"&gt;shameless&lt;/a&gt; &amp;mdash; and then looked
for patterns.&lt;/p&gt;

&lt;p&gt;One of Sandi&amp;rsquo;s key points from her OOD training is that it helps to look for
simliar code, and extract the differences. This lets you make code that is
nearly the same, actually be the same, and then you can tackle the duplication.&lt;/p&gt;

&lt;p&gt;By this point I&amp;rsquo;d pretty much sketched out the algorithm. Its still not
particularly nice, but it works and there&amp;rsquo;s something to work with.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PrintDiamond&lt;/span&gt;
  &lt;span class="no"&gt;ALPHABET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pad_inside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;
      &lt;span class="n"&gt;letter&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;internal_padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;internal_padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pad_out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid_letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m concerned about that &lt;code&gt;if letter == &amp;#39;A&amp;#39;&lt;/code&gt;, and I definitely sense there&amp;rsquo;s an
object or two waiting to leap out! I won&amp;rsquo;t bore you with the step-by-step
&lt;a href="https://github.com/tooky/print-diamond/tree/refactoring"&gt;refactorings&lt;/a&gt;, as this post is already pretty long. This was where
I stopped though:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;PrintDiamond&lt;/span&gt;
  &lt;span class="no"&gt;ALPHABET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_diamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Diamond&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Diamond&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:letter&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
      &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;PaddedRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rows&lt;/span&gt;
      &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;top&lt;/span&gt;
      &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bottom&lt;/span&gt;
      &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Row&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:letter&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
      &lt;span class="n"&gt;create_chars&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
      &lt;span class="vi"&gt;@chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;row_size&lt;/span&gt;
      &lt;span class="c1"&gt;# 0 -&amp;gt; 1, 1 -&amp;gt; 3, 3 -&amp;gt; 7, ...&lt;/span&gt;
      &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_chars&lt;/span&gt;
      &lt;span class="vi"&gt;@chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="vi"&gt;@chars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
      &lt;span class="vi"&gt;@chars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaddedRow&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:diamond_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:letter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diamond_letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
      &lt;span class="vi"&gt;@diamond_letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diamond_letter&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt;
      &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding_size&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;padding_size&lt;/span&gt;
      &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diamond_letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t claim this as an example of TDD. I think this is what &lt;a href="http://www.jbrains.ca/permalink/how-test-driven-development-works-and-more"&gt;J. B.
Rainsberger&lt;/a&gt; would call test-first development. The tests were written
first, but they didn&amp;rsquo;t influence the design particularly. I think it is an
example of evolutionary design, and how having tests enables the refactoring
that allows a design to emerge.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Connascence and Inverting Dependencies</title>
    <link rel="alternate" href="http://tooky.co.uk/connascence-and-inverting-dependencies/"/>
    <id>http://tooky.co.uk/connascence-and-inverting-dependencies/</id>
    <published>2014-11-07T00:00:00+00:00</published>
    <updated>2014-11-07T07:52:18+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Recently &lt;a href="http://twitter.com/abernardes"&gt;Andre Bernardes&lt;/a&gt; &lt;a href="http://abernardes.github.io/2014/11/04/inverting-dependencies.html"&gt;wrote about inverting
dependencies&lt;/a&gt; and a refactoring that he made in the &lt;a href="http://rom-rb.org"&gt;Ruby Object
Mapper&lt;/a&gt; codebase.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a great article and if you haven&amp;rsquo;t read it yet it won&amp;rsquo;t take you long.
Go on, I can wait.&lt;/p&gt;

&lt;p&gt;The original code, however, doesn&amp;rsquo;t simply provide a great example of code that
violates the &lt;a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;Dependency Inversion Principle&lt;/a&gt;. Let&amp;rsquo;s take a closer look and
see what else we can find.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Adapter&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Addressable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scheme&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'sqlite'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'jdbc'&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="no"&gt;Adapter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sequel&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'memory'&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="no"&gt;Adapter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Memory&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'mongo'&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="no"&gt;Adapter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Mongo&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;uri_string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; uri is not supported"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 2010 I saw Jim Weirich speak about the &lt;a href="http://vimeo.com/10837903"&gt;Grand Unified Theory of Software
Development&lt;/a&gt; (this is the version from Aloha on Rails) where he introduced
his audience to the idea of &lt;a href="http://en.wikipedia.org/wiki/Connascence_(computer_programming)"&gt;Connascence&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In software engineering, two components are connascent if a change in one
would require the other to be modified in order to maintain the overall
correctness of the system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s look again at the &lt;code&gt;Adapter&lt;/code&gt; code through the lens of connascence.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setup&lt;/code&gt; method is checking the scheme of the &lt;code&gt;uri&lt;/code&gt; and deciding which
specific adapter to use in this instance. This is an example of &lt;a href="http://en.wikipedia.org/wiki/Connascence_(computer_programming)#Connascence_of_Meaning_.28CoM.29"&gt;Connascence of
Meaning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Andre pointed out in his post, adding a new adapter also means changing this
method. If an &lt;code&gt;Adapter&lt;/code&gt; is changed to handle different schemes, then this method
will also need to change. They must change together because they share the
meaning of the URI scheme.&lt;/p&gt;

&lt;p&gt;The refactoring that Andre has implemented doesn&amp;rsquo;t rid us of Connascence of
Meaning but it reduces the &lt;em&gt;Degree&lt;/em&gt; and increases the &lt;em&gt;Locality&lt;/em&gt; of the
connascence.&lt;/p&gt;

&lt;p&gt;When we are looking at connascence and deciding whether any particular instance
of connascence is acceptable, there are two concepts that we need to consider.&lt;/p&gt;

&lt;p&gt;The degree of connascence is really about the volume of connascence, how much of
it we can see. Andre mentions in his post that the example presented above is
not terrible, but when he was about to add 19 more branches to the case
statement it would have become much worse. The degree of connascence would have
increased, and would only have continued increasing.&lt;/p&gt;

&lt;p&gt;The locality of connascence is concerned with how closely related the elements
are. Stronger forms of connascence are considered to be more acceptable when the
elements involved are closer together. In the original &lt;code&gt;setup&lt;/code&gt; method the
connascence of meaning ties the &lt;code&gt;Adapter&lt;/code&gt; class to the specific adapters.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at Andre&amp;rsquo;s refactoring.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;# adapter.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Adapter&lt;/span&gt;
  &lt;span class="vi"&gt;@adapters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Addressable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;uri_string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; uri is not supported"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@adapters&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@adapters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;detect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;schemes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# adapter/memory.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Adapter&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Memory&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;schemes&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:memory&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Methods to communicate with DB omitted.&lt;/span&gt;

    &lt;span class="no"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"memory://test"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; Adapter::Memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We still have Connascence of Meaning, but it is now isolated inside the
individual adapter class, an adapter will change if the URI scheme it supports
changes. The &lt;em&gt;locality&lt;/em&gt; of connascence has been increased.&lt;/p&gt;

&lt;p&gt;Each specific adapter will only have a small number of schemes that it matches,
rather than all of them. The &lt;em&gt;degree&lt;/em&gt; of connascence has been reduced.&lt;/p&gt;

&lt;p&gt;By increasing the locality and reducing the degree of connascence, Andre has
made the connascence of meaning more acceptable. The connascence of meaning
resulted in the &lt;code&gt;Adapter&lt;/code&gt; abstraction depending on the details of the specific
adapters.&lt;/p&gt;

&lt;p&gt;It also prevented the &lt;code&gt;Adapter&lt;/code&gt; from being &lt;em&gt;Closed for Modification&lt;/em&gt;. Any time
we add a new adapter we need to change the &lt;code&gt;Adapter&lt;/code&gt; class to add another
branch to the switch statement. It violated the &lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;Open/Closed Principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Andre&amp;rsquo;s refactoring reduced the degree and increased the locality of connascence
of meaning. This makes the code adhere more closely to both the Single
Responsibility Principle and the Open/Closed Principle.&lt;/p&gt;

&lt;p&gt;I think this is a good example of what &lt;a href="http://twitter.com/kevinrutherford"&gt;Kevin Rutherford&lt;/a&gt; hints at in
&lt;a href="http://silkandspinach.net/2012/09/03/the-problem-with-code-smells/"&gt;The problem with code smells&lt;/a&gt;. By finding where our code is
more connascent &amp;mdash; having the stronger forms of connascence, having a high
degree of connascence, or having low locality of connascence &amp;mdash; and making
the connascence more acceptable, we will improve the design of our software.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Next Kickstart Academy Podcast Show with Liz Keogh and Chris Matts</title>
    <link rel="alternate" href="http://tooky.co.uk/next-kickstart-academy-podcast-show-with-liz-keogh-and-chris-matts/"/>
    <id>http://tooky.co.uk/next-kickstart-academy-podcast-show-with-liz-keogh-and-chris-matts/</id>
    <published>2014-08-21T01:00:00+01:00</published>
    <updated>2014-09-01T09:10:21+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Our next live Kickstart Academy podcast show will be on Monday, 1st
September at 15:30 BST. We&amp;rsquo;re pleased to welcome back &lt;a href="https://twitter.com/lunivore"&gt;Liz Keogh&lt;/a&gt; and
her invited guest &lt;a href="https://twitter.com/PapaChrisMatts"&gt;Chris Matts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The show will be broadcast live here as well as from the &lt;a href="https://plus.google.com/u/2/b/112947453773806733442/events/ca1jlhcdngrc29v5s96i8f2rdgc"&gt;event
page&lt;/a&gt;. If you have any questions during the show, please use the Q&amp;amp;A
app on the &lt;a href="https://plus.google.com/u/2/b/112947453773806733442/events/ca1jlhcdngrc29v5s96i8f2rdgc"&gt;event page&lt;/a&gt; or tweet us
&lt;a href="https://twitter.com/kickstartac"&gt;@kickstartac&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/VHmjW3qjkLE"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>Kickstart Academy Podcast with Liz Keogh and Corey Haines</title>
    <link rel="alternate" href="http://tooky.co.uk/kickstart-academy-podcast-with-liz-keogh-and-corey-haines/"/>
    <id>http://tooky.co.uk/kickstart-academy-podcast-with-liz-keogh-and-corey-haines/</id>
    <published>2014-07-31T01:00:00+01:00</published>
    <updated>2014-07-31T13:00:30+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;For the third installment of the Kickstart Academy podcast we were pleased to
have &lt;a href="https://twitter.com/lunivore"&gt;Liz Keogh&lt;/a&gt; join us &amp;mdash; and &lt;a href="https://twitter.com/coreyhaines"&gt;Corey Haines&lt;/a&gt; returned to the
panel for his second appearance.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We enjoyed having &lt;a href="https://twitter.com/sandimetz"&gt;Sandi Metz&lt;/a&gt; on the panel for the &lt;a href="http://kickstartacademy.io/blog/2014-07-29-kickstart-academy-podcast-with-corey-haines-and-sandi-metz"&gt;last
podcast&lt;/a&gt; so much that we hope to have a running theme of inviting
the previous guest back to the following show – in a similar vein to BBC Radio
4&amp;rsquo;s &lt;a href="http://en.wikipedia.org/wiki/Chain_Reaction_%28radio%29"&gt;Chain Reaction&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/_hKO-AVjCJM"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;There is an &lt;a href="https://dl.dropboxusercontent.com/u/41915/kickstart-academy-podcast/003-liz-keogh-and-corey-haines.mp3"&gt;audio version of this podcast available here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Show Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[0:01:39] Liz&amp;rsquo;s backstory&lt;/li&gt;
&lt;li&gt;[0:04:17] Define &lt;a href="http://en.wikipedia.org/wiki/Cynefin"&gt;Cynefin&lt;/a&gt; - a sense making framework

&lt;ul&gt;
&lt;li&gt;Simple/Obvious - children can solve it&lt;/li&gt;
&lt;li&gt;Requires expertise - watchmaker&lt;/li&gt;
&lt;li&gt;Complex - not predictable outcomes&lt;/li&gt;
&lt;li&gt;Chaos - accident and emergency&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:08:30] Software development approaches within the different cynefin domains

&lt;ul&gt;
&lt;li&gt;Commoditised requirements vs Differentiating Requirements&lt;/li&gt;
&lt;li&gt;Chaos - Experiment / Spike / Probe&lt;/li&gt;
&lt;li&gt;Requires expertise - Analyze (e.g. BDD)&lt;/li&gt;
&lt;li&gt;Simple - off the shelf&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:12:25] Capabilities vs Goals

&lt;ul&gt;
&lt;li&gt;Understanding the goal behind the capability&lt;/li&gt;
&lt;li&gt;Which stakeholders are getting the benefit?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/imtomgilb"&gt;Tom Gilb&lt;/a&gt; - &lt;a href="http://gilb.com/Project-Management"&gt;Evolutionary Project Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:16:31] Is BDD a design activity not required for obvious requirements? - &lt;a href="https://twitter.com/mattwynne"&gt;Matt Wynne&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Analyze as simply as possible&lt;/li&gt;
&lt;li&gt;Name the scenarios&lt;/li&gt;
&lt;li&gt;Ask: is there anything different?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:20:40] BDD: automation and regression testing

&lt;ul&gt;
&lt;li&gt;How you set the context with &amp;ldquo;Given&amp;rdquo; doesn&amp;rsquo;t matter&lt;/li&gt;
&lt;li&gt;&amp;ldquo;When&amp;rdquo; is the actual behaviour your interested in&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:22:11] Liz&amp;rsquo;s scale for classifying capabilities

&lt;ul&gt;
&lt;li&gt;5 - nobody in the world has ever done it before&lt;/li&gt;
&lt;li&gt;4 - somebody has done it before but not in this organisation&lt;/li&gt;
&lt;li&gt;3 - somebody in this organisation has done it before, and we need their expertise&lt;/li&gt;
&lt;li&gt;2 - somebody in the team has done it before&lt;/li&gt;
&lt;li&gt;1 - we all know how to do it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:23:05] When automated scenarios catch a regression bug it&amp;rsquo;s usually because of poor design

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t just throw more scenarios at it find out why your getting the bugs&lt;/li&gt;
&lt;li&gt;Often because two capabilities are bleeding in to each other&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:25:51] Techniques for talking through capabilities with stakeholders

&lt;ul&gt;
&lt;li&gt;Why are we doing this project?&lt;/li&gt;
&lt;li&gt;Who are we doing it for?&lt;/li&gt;
&lt;li&gt;Can you give me an example?&lt;/li&gt;
&lt;li&gt;What will you be able to do that you can&amp;rsquo;t do now?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:30:44] Focusing on the outcome

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/PapaChrisMatts"&gt;Chris Matts&lt;/a&gt; - &lt;a href="http://theitriskmanager.wordpress.com/2014/07/06/a-tale-of-two-feature-injections-a-cynefin-tale/"&gt;Value Mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Assign numbers from Liz&amp;rsquo;s scale to capabilities&lt;/li&gt;
&lt;li&gt;For 1s and 2s, &amp;ldquo;Choose the technology that&amp;rsquo;s easy to change&amp;rdquo; - Chris Matts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:37:01] Applying BDD at the different levels

&lt;ul&gt;
&lt;li&gt;When outcomes are uncertain, can lead to analysis paralysis&lt;/li&gt;
&lt;li&gt;Often an indicator of 4s and 5s&lt;/li&gt;
&lt;li&gt;So find a way to prototype/experiment&lt;/li&gt;
&lt;li&gt;Listen for the uncertainty&lt;/li&gt;
&lt;li&gt;Listen for the boredom&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:42:05] What is BDD?

&lt;ul&gt;
&lt;li&gt;Not testing tools with BDD mode - &amp;ldquo;should&amp;rdquo; or &amp;ldquo;expect&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Using examples to illustrate behaviour&amp;rdquo; - Liz&lt;/li&gt;
&lt;li&gt;Let dev&amp;rsquo;s write the scenarios, and get feedback from the testers and experts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tastapod"&gt;Dan North&lt;/a&gt;&amp;rsquo;s &lt;a href="http://en.wikipedia.org/wiki/Behavior-driven_development#History"&gt;definition&lt;/a&gt; true in 2009, maybe not 2010&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not necessarily high-automation&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still outside-in&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still 2nd generation&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still pull-based&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still multiple-scale&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still agile&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still about getting feedback&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still a cycle of interactions&lt;/li&gt;
&lt;li&gt;We now respect we can&amp;rsquo;t always get well defined outputs&lt;/li&gt;
&lt;li&gt;It still results in software that matters&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:49:01] Patterns for improving scenarios

&lt;ul&gt;
&lt;li&gt;Just write down what people say&lt;/li&gt;
&lt;li&gt;Have the conversation&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t try to make patterns fit existing steps&lt;/li&gt;
&lt;li&gt;Step away from the tools&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:53:14] How does having theses conversations about the system itself affect the minute-by-minute development process?

&lt;ul&gt;
&lt;li&gt;Leads to more spikes and prototypes, and understanding why to do them?&lt;/li&gt;
&lt;li&gt;Less useful for large organisations where a lot of the work is governed by regulations&lt;/li&gt;
&lt;li&gt;Removes frustrations of things like 4-hour planning meetings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:55:25] Can you use examples to identify and then test your assumptions?&lt;/li&gt;
&lt;li&gt;[0:57:45] Leveling capabilities

&lt;ul&gt;
&lt;li&gt;Map out the capabilities&lt;/li&gt;
&lt;li&gt;Map the stakeholders - then understand the capailities they are looking for&lt;/li&gt;
&lt;li&gt;Try estimating them using relative sizes&lt;/li&gt;
&lt;li&gt;Find the capabilities that are new&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[1:00:33] Liz&amp;rsquo;s Fantasy Fiction

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/silversongchild"&gt;The Silversong Child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/nightingalethrone"&gt;The Nightingale Throne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High-level fantasy - a bit like Game of Thrones, with less killings and more magic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[1:01:40] How do you guard against new adopters of BDD from just rewriting existing requirements with new words, e.g. should, then, describe, expect - &lt;a href="https://twitter.com/kerryb"&gt;Kerry Buckley&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimeo.com/75923366"&gt;What is the value of Social Capital? - Jabe Bloom&lt;/a&gt; - &lt;a href="https://twitter.com/cyetain"&gt;Jabe Bloom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Kickstart Academy Podcast with Corey Haines and Sandi Metz</title>
    <link rel="alternate" href="http://tooky.co.uk/kickstart-academy-podcast-with-corey-haines-and-sandi-metz/"/>
    <id>http://tooky.co.uk/kickstart-academy-podcast-with-corey-haines-and-sandi-metz/</id>
    <published>2014-07-29T01:00:00+01:00</published>
    <updated>2014-07-29T11:25:30+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Last month we broadcast our 2nd live podcast. We were fortunate to be joined by
&lt;a href="https://twitter.com/coreyhaines"&gt;Corey Haines&lt;/a&gt; &amp;mdash; to discuss simple design &amp;mdash; and by &lt;a href="https://twitter.com/sandimetz/"&gt;Sandi
Metz&lt;/a&gt; &amp;mdash; who was kind enough to return for a second show.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/BT7MYd07OFw"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;There is an &lt;a href="http://bit.ly/1lR4AsO"&gt;audio version of this podcast available here&lt;/a&gt; - but due to the nature
of the live code examples on the video version that is probably the better
experience.&lt;/p&gt;

&lt;h2&gt;Show Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[0:02:20] &amp;mdash; 4 rules of simple design

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/kentbeck"&gt;Kent Beck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Design that is easier to change&amp;rdquo; - Corey&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jbrains.ca/permalink/the-four-elements-of-simple-design"&gt;Four elements of simple design&lt;/a&gt; &amp;mdash; &lt;a href="https://twitter.com/jbrains"&gt;J. B. Rainsberger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:6:11] &amp;mdash; &lt;a href="https://leanpub.com/4rulesofsimpledesign"&gt;Understanding the 4 Rules of Simple Design&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coderetreat.org/"&gt;Code Retreat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sandi doesn&amp;rsquo;t hate Corey&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:10:17] Understanding Testing Book

&lt;ul&gt;
&lt;li&gt;What can you learn from writing your own assert method?&lt;/li&gt;
&lt;li&gt;All testing frameworks bring baggage with them - leaving that aside allows
you to understand the fundamentals&lt;/li&gt;
&lt;li&gt;Do you start with &lt;code&gt;assert&lt;/code&gt; or &lt;code&gt;assert_true&lt;/code&gt; ?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:19:55] Writing your own assert method demo

&lt;ul&gt;
&lt;li&gt;(apologies about the sound cutting in and out, Hangouts appears to mute
typing)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Fundamentally testing is about checking that two things are the same&amp;rdquo; - Corey&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:30:02] Having rich ways of verifying your system can mask design feedback from simple tests

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.typemock.com/"&gt;TypeMock&lt;/a&gt; for mocking static methods in .NET masked the need to inject dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:36:00] Only having simple testing features can lead to writing a single method that does everything&lt;/li&gt;
&lt;li&gt;[0:38:10] The tension between learning and getting things out in production

&lt;ul&gt;
&lt;li&gt;Being able to explain the value of the things that you use&lt;/li&gt;
&lt;li&gt;Doing something because smart people say you should do it, and understanding why they do it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:45:21] What&amp;rsquo;s the best approach to teaching design sense to new programmers?

&lt;ul&gt;
&lt;li&gt;Go back to the mechanical refactoring steps - back to the fundamentals&lt;/li&gt;
&lt;li&gt;&amp;ldquo;refactorings are little machines that produce objects&amp;rdquo; - Sandi&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29"&gt;SOLID&lt;/a&gt; principles are guide points&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:54:10] Actionable principles

&lt;ul&gt;
&lt;li&gt;SOLID principles are hard to action, minute-by-minute&lt;/li&gt;
&lt;li&gt;Inner/outer design loops&lt;/li&gt;
&lt;li&gt;&lt;a href="http://industriallogic.com/xp/refactoring/"&gt;Refactoring to Patterns - Joshua Kerievsky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[01:01:22] Efficient ways of travelling the long road

&lt;ul&gt;
&lt;li&gt;Paying attention to what your doing&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.innovationexcellence.com/blog/2012/10/24/divergent-and-convergent-thinking/"&gt;Divergent/convergent thinking&lt;/a&gt; phases&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Sunk_costs"&gt;Sunk cost fallacy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[01:04:07] Only ever one undo away from being back to green

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/tooky/a75778f70499af2f9435"&gt;Corey&amp;rsquo;s Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/presentations/The-Limited-Red-Society"&gt;Limited Red Society - Joshua Kerievsky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimeo.com/3763583"&gt;Time to Green Graph - Gary Bernhardt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Using charklock_holmes on Heroku</title>
    <link rel="alternate" href="http://tooky.co.uk/using-charklock_holmes-on-heroku/"/>
    <id>http://tooky.co.uk/using-charklock_holmes-on-heroku/</id>
    <published>2014-06-11T01:00:00+01:00</published>
    <updated>2014-06-11T13:58:54+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/brianmario/charlock_holmes"&gt;&lt;code&gt;charlock_holmes&lt;/code&gt;&lt;/a&gt; is a useful gem if you have to deal with
user supplied data which may come in a variety of text-encodings. Not only does
it enable you to detect the encoding of a string, but it also allows you to
transcode the string to a different encoding.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;charklock_holmes&lt;/code&gt; uses &lt;a href="http://site.icu-project.org"&gt;&lt;code&gt;libicu&lt;/code&gt;&lt;/a&gt; to deal with string encoding.&lt;/p&gt;

&lt;p&gt;Unfortunately, the default &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; buildpack for Ruby doesn&amp;rsquo;t include
&lt;code&gt;libicu&lt;/code&gt; which prevents bundler from being able to compile &lt;code&gt;charklock_holmes&lt;/code&gt;
C-extension.&lt;/p&gt;

&lt;p&gt;There have been a few attempts at solving this problem, most of which are
discussed over on &lt;a href="http://stackoverflow.com/questions/18926574/how-to-install-charlock-holmes-dependency-libicu-dev-on-heroku"&gt;stack overflow&lt;/a&gt;. The &lt;a href="http://stackoverflow.com/a/18926982/223996"&gt;accepted
answer&lt;/a&gt; is a common solution, which relies on using
a version of the gem which includes a bundled version of &lt;code&gt;libicu&lt;/code&gt;. While this
works, it does result in very slow build times both on heroku, and locally when
doing a bundle install.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/a/20507705/223996"&gt;Another solution&lt;/a&gt; uses a custom version of the ruby
buildpack which includes &lt;code&gt;libicu&lt;/code&gt; &amp;mdash; while this is a simple solution it
relies on the maintainer of that solution keeping it up to date with heroku&amp;rsquo;s
ruby buildpack.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/a/22662875/223996"&gt;My favourite solution&lt;/a&gt; seems to move in the right direction,
it uses &lt;a href="https://github.com/ddollar/heroku-buildpack-multi"&gt;&lt;code&gt;heroku-buildpack-multi&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://github.com/ddollar/heroku-buildpack-apt"&gt;&lt;code&gt;heroku-buildpack-apt&lt;/code&gt;&lt;/a&gt; to install &lt;code&gt;libicu&lt;/code&gt; using apt.
Unfortunately it uses a forked version of the &lt;code&gt;heroku-buildpack-apt&lt;/code&gt; which
adds specific behaviour for &lt;code&gt;charlock_holmes&lt;/code&gt; and where &lt;code&gt;bundler&lt;/code&gt; can find the
version of &lt;code&gt;libicu&lt;/code&gt; installed by &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My solution builds upon the previous solution, but rather than use a custom
version of the &lt;code&gt;heroku-buildpack-apt&lt;/code&gt; I have added one more buildpack into the
mix &amp;mdash; &lt;a href="https://github.com/timolehto/heroku-bundle-config"&gt;&lt;code&gt;heroku-bundle-config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This buildpack allows you to configure your heroku bundler config in your
repository in the &lt;code&gt;.heroku-bundle&lt;/code&gt; directory. During the build it will move this
directory to &lt;code&gt;.bundle&lt;/code&gt;, and most importantly, make sure that all &lt;code&gt;/app&lt;/code&gt; paths
point correctly to the temporary build directory.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a &lt;a href="https://github.com/tooky/heroku-charlock-holmes"&gt;sample project&lt;/a&gt;, that can be &lt;a href="http://heroku-charlock-holmes.herokuapp.com"&gt;deployed to heroku&lt;/a&gt; – the only thing
you need to do is ensure that you have set the &lt;code&gt;BUILDPACK_URL&lt;/code&gt; to
&lt;code&gt;https://github.com/ddollar/heroku-buildpack-multi.git&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ heroku config:set BUILDPACK_URL=https://github.com/ddollar/heroku-buildpack-multi.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you push to heroku, this buildpack will check for a &lt;code&gt;.buildpacks&lt;/code&gt; file,
which specify the different buildpacks you want to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;https://github.com/ddollar/heroku-buildpack-apt
https://github.com/timolehto/heroku-bundle-config
https://github.com/heroku/heroku-buildpack-ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;heroku-buildpack-apt&lt;/code&gt; will then check for an &lt;code&gt;Aptfile&lt;/code&gt; and install the
specified packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;libicu-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you need to configure you &lt;code&gt;.heroku-bundle/config&lt;/code&gt; to make sure that
&lt;code&gt;bundler&lt;/code&gt; can use your newly installed version of &lt;code&gt;libicu&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;---
BUNDLE_FROZEN: '1'
BUNDLE_PATH: vendor/bundle
BUNDLE_BIN: vendor/bundle/bin
BUNDLE_JOBS: 4
BUNDLE_WITHOUT: development:test
BUNDLE_DISABLE_SHARED_GEMS: '1'
BUNDLE_BUILD__CHARLOCK_HOLMES: --with-icu-lib=/app/.apt/usr/lib --with-icu-include=/app/.apt/usr/include
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should be all you need.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using `direnv` and `chruby` together</title>
    <link rel="alternate" href="http://tooky.co.uk/using-direnv-and-chruby-together/"/>
    <id>http://tooky.co.uk/using-direnv-and-chruby-together/</id>
    <published>2014-06-10T01:00:00+01:00</published>
    <updated>2014-06-10T07:07:17+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been using &lt;a href="https://github.com/postmodern/chruby"&gt;&lt;code&gt;chruby&lt;/code&gt;&lt;/a&gt; to manage my ruby versions for a few
months &amp;mdash; I like it&amp;rsquo;s lightweight approach.&lt;/p&gt;

&lt;p&gt;A combination of &lt;a href="http://bundler.io"&gt;bundler&amp;rsquo;s&lt;/a&gt; &lt;a href="http://robots.thoughtbot.com/use-bundlers-binstubs"&gt;binstubs&lt;/a&gt;, the introduction
of rails 4 introducing the &lt;code&gt;bin&lt;/code&gt; directory and trying to &lt;a href="http://12factor.net"&gt;use the
environment to configure my apps&lt;/a&gt; has meant I wanted a way to
to manage my environment on a per project basis.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried using &lt;a href="https://github.com/bkeepers/dotenv"&gt;dotenv&lt;/a&gt;, which works well for ruby projects, and for
setting environment variables to be used by your app &amp;mdash; but, as far as
I can tell, it doesn&amp;rsquo;t actually modify your environment. So setting your &lt;code&gt;PATH&lt;/code&gt;
to select the correct binary, e.g. &lt;code&gt;bin/rails&lt;/code&gt; in a rails app, won&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/zimbatm/direnv"&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;direnv&lt;/code&gt; looks for a &lt;code&gt;.envrc&lt;/code&gt; file in a directory and
loads any thing there into your environment. You have to specifically allow
direnv to load a file, and it tracks modifications to the file. It&amp;rsquo;s very nice.&lt;/p&gt;

&lt;p&gt;Unfortunately, I had a problem using it alongside &lt;code&gt;chruby&lt;/code&gt; &amp;mdash; everytime
I entered a directory &lt;code&gt;direnv&lt;/code&gt; would do it&amp;rsquo;s thing and then &lt;code&gt;chruby&lt;/code&gt; would
follow suit, and I could never quite get the result I wanted! For example, I&amp;rsquo;d
have the right version of ruby, but the wrong &lt;code&gt;PATH&lt;/code&gt; &amp;amp;mdash or the right &lt;code&gt;PATH&lt;/code&gt;
with the wrong ruby.&lt;/p&gt;

&lt;p&gt;To fix this I removed &lt;code&gt;chruby&lt;/code&gt;&amp;rsquo;s auto switching feature from my default
environment, and based on a suggestion &lt;a href="https://github.com/zimbatm/direnv/issues/98"&gt;here&lt;/a&gt; added a &lt;code&gt;use_ruby&lt;/code&gt;
function to my &lt;code&gt;~/.direnvrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/share/chruby/chruby.sh

&lt;span class="c"&gt;# use ruby [version]&lt;/span&gt;
use_ruby&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="nv"&gt;$ver&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -f .ruby-version &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;ver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat .ruby-version&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;fi
  if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="nv"&gt;$ver&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;Unknown ruby version
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
  &lt;span class="k"&gt;fi
  &lt;/span&gt;chruby &lt;span class="nv"&gt;$ver&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This checks for a &lt;code&gt;.ruby-version&lt;/code&gt; file, and, if it finds one, defers to &lt;code&gt;chruby&lt;/code&gt;
to load the correct ruby environment.&lt;/p&gt;

&lt;p&gt;I can now use this function in a project &lt;code&gt;.envrc&lt;/code&gt; to load ruby before I modify
the path:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;use ruby
PATH_add bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also pass a ruby version to the &lt;code&gt;use_ruby&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;use ruby 2.1
PATH_add bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want to use a &lt;code&gt;.ruby-version&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This seems to work really well. The only downside is that I don&amp;rsquo;t have
autoswitching of ruby versions anymore &amp;mdash; unless I decide that&amp;rsquo;s what
I want. I don&amp;rsquo;t think its too bad to have to be explicit about that.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Kickstart Academy Podcast with Sandi Metz</title>
    <link rel="alternate" href="http://tooky.co.uk/kickstart-academy-podcast-with-sandi-metz/"/>
    <id>http://tooky.co.uk/kickstart-academy-podcast-with-sandi-metz/</id>
    <published>2014-05-21T01:00:00+01:00</published>
    <updated>2014-06-10T07:00:47+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/mattwynne"&gt;Matt&lt;/a&gt;, &lt;a href="https://twitter.com/chrismdp"&gt;Chris&lt;/a&gt; and &lt;a href="https://twitter.com/tooky"&gt;I&lt;/a&gt; were joined yesterday by &lt;a href="https://twitter.com/sandimetz"&gt;Sandi
Metz&lt;/a&gt; for a live google hangout.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/u-d2v_8YYw4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can &lt;a href="https://dl.dropboxusercontent.com/u/41915/kickstart-academy-podcast/001-sandi-metz.mp3"&gt;download an audio only version of the podcsast
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to thank Sandi for giving us her time and her insight!&lt;/p&gt;

&lt;p&gt;We would love to hear any thoughts you have about the show - either about the
content or the format. We&amp;rsquo;re planning to do a live show about once a month, so
if there&amp;rsquo;s anyone you&amp;rsquo;d like us to talk to, or any topics you&amp;rsquo;d like us to cover
please let us know.&lt;/p&gt;

&lt;p&gt;You can email us at &lt;a href="mailto:hello@bddkickstart.com"&gt;hello@bddkickstart.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Show notes&lt;/h2&gt;

&lt;p&gt;We all had a lot of fun and covered quite a few topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/makaroni4/sandi_meter"&gt;The Sandi Meter&lt;/a&gt; and the (don&amp;rsquo;t call them the) &amp;ldquo;Sandi Metz&amp;rdquo; rules&lt;/li&gt;
&lt;li&gt;Small Things&lt;/li&gt;
&lt;li&gt;Letting go of the big picture&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Everything I know now I cargo culted&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Finding the sweet spot between extremes&lt;/li&gt;
&lt;li&gt;Experimenting&lt;/li&gt;
&lt;li&gt;Object-oriented thinking&lt;/li&gt;
&lt;li&gt;Rails and frameworks&lt;/li&gt;
&lt;li&gt;Testability

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tomstuart"&gt;Tom Stuart&lt;/a&gt; - &lt;a href="http://codon.com/how-testability-can-help"&gt;How testability can help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Open/closed_principle"&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Focus on the messages&lt;/li&gt;
&lt;li&gt;Starting at the whiteboard&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not &lt;a href="http://geepawhill.org/?p=47"&gt;TDYAR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;End-to-end testing vs isolated testing&lt;/li&gt;
&lt;li&gt;Testing at different levels of granularity&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.thecodewhisperer.com/2014/05/14/the-curious-case-of-tautological-tdd/"&gt;Tautological TDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TDD and driving desing&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Confidence&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kickstartacademy.io/courses/practical-object-oriented-design"&gt;#POODL&lt;/a&gt; - Practical Object Oriented Design classes with Sandi and
Matt in London&lt;/li&gt;
&lt;li&gt;Integration tests and testing roles&lt;/li&gt;
&lt;li&gt;Functional vs Object Oriented

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://elixir-lang.org/"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Microservices Architecture

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fgeorge52"&gt;Fred George&lt;/a&gt; on &lt;a href="http://oredev.org/2013/wed-fri-conference/implementing-micro-service-architectures"&gt;Microservices Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Readable code&lt;/li&gt;
&lt;li&gt;Imperative vs Declarative approach&lt;/li&gt;
&lt;li&gt;Tell Don&amp;rsquo;t Ask - What Not How&lt;/li&gt;
&lt;li&gt;&lt;a href="http://signup.practicalrailsbook.com/?lrRef=Ejvoln"&gt;Practical Rails Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;99 Bottles of Beer&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimeo.com/26330100"&gt;T R U E&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/unclebobmartin"&gt;Uncle Bob Martin&lt;/a&gt; - &lt;a href="http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf"&gt;Symptoms of Rotting Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Exemplary Code&lt;/li&gt;
&lt;li&gt;The pattern failed me

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=x1wnI0AxpEU"&gt;All the little things keynote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gilded rose kata&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code Metrics

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/seattlerb/flog"&gt;Flog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeclimate.com/"&gt;Code Climate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Hangout with Matt Wynne and Aslak Hellesøy</title>
    <link rel="alternate" href="http://tooky.co.uk/hangout-with-matt-wynne-and-aslak-hellesoy/"/>
    <id>http://tooky.co.uk/hangout-with-matt-wynne-and-aslak-hellesoy/</id>
    <published>2014-05-16T16:11:00+01:00</published>
    <updated>2014-06-10T07:00:47+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago Matt, Aslak and I held a live google hangout. Today I realised
that I hadn&amp;rsquo;t mentioned it here. If you haven&amp;rsquo;t seen it yet you can watch it
here:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/P6znT1H04PE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;d love to hear what you thought about it, and what we can do better next time
&amp;mdash; especially as next time is this Monday, and we&amp;rsquo;ll be joined by &lt;a href="http://www.sandimetz.com"&gt;Sandi
Metz&lt;/a&gt; to talk about object-oriented design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://plus.google.com/b/112947453773806733442/events/ck08u3ha70spbk5p467j2ip5sgs"&gt;Kickstart Academy Hangout with Sandi Metz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the hangout format means that we can include screensharing, code and most
importantly your contributions! Please let us know what you&amp;rsquo;d like to hear us
discuss.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Cucumber Test Trap</title>
    <link rel="alternate" href="http://tooky.co.uk/the-cucumber-test-trap/"/>
    <id>http://tooky.co.uk/the-cucumber-test-trap/</id>
    <published>2014-03-29T00:00:00+00:00</published>
    <updated>2014-04-03T11:55:02+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/aslak_hellesoy"&gt;Aslak Hellesøy&lt;/a&gt; recently wrote how cucumber is &amp;ldquo;&lt;a href="https://cucumber.pro/blog/2014/03/03/the-worlds-most-misunderstood-collaboration-tool.html"&gt;the world&amp;rsquo;s most
misunderstood collaboration tool&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cucumber was born out of the frustration with ambiguous requirements and
misunderstandings between the people who order the software and those who
deliver it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anybody who has spent time with more than a few codebases that use cucumber will
probably recognise Aslak&amp;rsquo;s description of a cucumber anti-pattern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When Cucumber is adopted solely as a tool to write automated tests without
any input from business analysts they tend to become imperative and lose
their documentation value.&lt;/p&gt;

&lt;p&gt;This also makes them slow and brittle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This doesn&amp;rsquo;t tell the whole story though - there are many teams that work with
the business to define their scenarios, that make an effort to write declarative
scenarios - yet some of these teams still suffer from slow and brittle builds.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;ve fallen into the cucumber test trap - they want to document everything
the system does and automatically check it using cucumber.&lt;/p&gt;

&lt;p&gt;As they start building their system the automated cucumber suite gives them
the confidence that everything is working. Running the features is quick and
their system is simple. As they add behaviour to the system they diligently
document the behaviour in gherkin and automate it with cucumber. All of the
while running every scenario from end-to-end through their entire stack.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://pragprog.com/book/hwcuc/the-cucumber-book"&gt;The Cucumber Book&lt;/a&gt; (&lt;em&gt;When Cucumbers Go Bad&lt;/em&gt; p. 103), &lt;a href="https://twitter.com/mattwynne"&gt;Matt
Wynne&lt;/a&gt; and Aslak describe one of the main causes for &amp;ldquo;&lt;em&gt;Slow Features&lt;/em&gt;&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lots of Scenarios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might seem like stating the obvious, but having a lot of scenarios is by
far the easiest way to give yourself a slow overall feature run. We&amp;rsquo;re not
trying to suggest you give up on BDD and go back to cowboy coding, but we do
suggest you treat a slow feature run as a red flag. Having lots of tests has
other disadvantages than just waiting a long time for feedback. It&amp;rsquo;s hard
to keep a large set of features organized, making them awkward for readers
to navigate around. Maintenance is also harder on the underlying step
definitions and support code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course this isn&amp;rsquo;t really a product of using cucumber, or even trying to get
started with BDD or Specification by Example. It&amp;rsquo;s exactly the same problem that
&lt;a href="https://twitter.com/jbrains/"&gt;J. B. Rainsberger&lt;/a&gt; describes when he says that &amp;ldquo;&lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;integrated tests
are a scam&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You write integrated tests because you can&amp;rsquo;t write perfect unit tests. You
know this problem: all your unit tests pass, but someone finds a defect
anyway.  Sometimes you can explain this by finding an obvious unit test you
simply missed, but sometimes you can&amp;rsquo;t. In those cases, you decide you need
to write an integrated test to make sure that all the production
implementations you use in the broken code path now work correctly together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As soon as you make a decision that you will describe everything your system
does using cucumber features you&amp;rsquo;ve left BDD behind, fallen into the cucumber
test trap and are destined to have &amp;ldquo;&lt;em&gt;Lots of Scenarios&lt;/em&gt;&amp;rdquo;. J. B.
&lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;describes&lt;/a&gt; this brilliantly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have a medium-sized web application with around 20 pages, maybe 10 of
which have forms. Each form has an average of 5 fields and the average field
needs 3 tests to verify thoroughly. Your architecture has about 10 layers,
including web presentation widgets, web presentation pages, abstract
presentation, an HTTP bridge to your service API, controllers, transaction
scripts, abstract data repositories, data repository implementations, SQL
statement mapping, SQL execution, and application configuration. A typical
request/response cycle creates a stack trace 30 frames deep, some of which
you wrote, and some of which you&amp;rsquo;ve taken off the shelf from a wide variety
of open source and commercial packages. How many tests do you need to test
this application thoroughly?&lt;/p&gt;

&lt;p&gt;At least 10,000. Maybe a million. One million.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;One million&lt;/em&gt; scenarios - even &lt;em&gt;10,000&lt;/em&gt; scenarios - to thoroughly check &amp;ldquo;a
medium sized web application&amp;rdquo; using cucumber. All of them running end-to-end. No
wonder teams have &amp;ldquo;&lt;em&gt;Slow Features&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Avoiding the cucumber test trap is hard. It&amp;rsquo;s easy to keep adding scenarios
which give you a false confidence that your application is working correctly.
It&amp;rsquo;s easy to just add some more code to make those scenarios pass.&lt;/p&gt;

&lt;p&gt;Instead we need to keep &lt;a href="http://lizkeogh.com/2011/09/22/conversational-patterns-in-bdd/"&gt;focusing on the conversations&lt;/a&gt;. Find the
scenarios that matter, that are important to document, that are worth automating
and push everything else down into lower level, isolated tests.&lt;/p&gt;

&lt;p&gt;Define contracts between layers, and test those exhaustively. Allow the design
pressure of creating testable code help you to build a cleaner, maintainable
application. This will help you prevent another one of the main causes of &amp;ldquo;&lt;em&gt;Slow
Features&lt;/em&gt;&amp;rdquo; that Matt and Aslak describe in The Cucumber Book.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Big Ball of Mud&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Big Ball of Mud is an ironic name given to the type of software design
you see when nobody has really made much effort to actually do any software
design. In other words, it&amp;rsquo;s a big, tangled mess.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the &lt;a href="http://www.meetup.com/Extreme-Programmers-London/"&gt;Extreme Programmers London&lt;/a&gt; meetup last week &lt;a href="https://twitter.com/keithb_b"&gt;Keith
Braithwaite&lt;/a&gt; talked about code metrics and the effect that
unit-testing has on the distribution of complexity in the codebase. During the
talk he mentioned that he thought the part of the TDD cycle that has the biggest
effect on the software design is when you have to add the next test, because we
often have to refactor our code to support adding the next test - to make it
testable.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://www.growing-object-oriented-software.com"&gt;Growing Object Oriented Software, Guided by Tests&lt;/a&gt; (&lt;em&gt;What Is the Point
of Test-Driven Development&lt;/em&gt;), &lt;a href="https://twitter.com/sf105"&gt;Steve Freeman&lt;/a&gt; and &lt;a href="https://twitter.com/natpryce"&gt;Nat Pryce&lt;/a&gt;
describe why testable code &lt;em&gt;is&lt;/em&gt; well designed code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thorough unit testing helps us to improve the internal quality because, to
be tested, a unit has to be structured to run outside the system in a test
fixture. A unit test for an object needs to create the object, provide its
dependencies, interact with it, and check that it behaved as expected. So,
for a class to be easy to unit-test, the class must have explicit
dependencies that can easily be substituted and clear responsibilities that
can easily be invoked and verified. In software engineering terms, that
means that the code must be &lt;em&gt;loosely coupled&lt;/em&gt; and &lt;em&gt;highly cohesive&lt;/em&gt; - in
other words, well designed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By falling into the cucumber test trap and relying on checking the system
end-to-end you lose this valuable design pressure that comes from TDD. You have
no need to make your units testable in isolation, because it&amp;rsquo;s &lt;em&gt;easy&lt;/em&gt; to add
another test that runs from outside of the application. Which means you have
nothing pushing you to improve the internal quality of the codebase, nothing to
help you avoid creating a &lt;em&gt;Big Ball of Mud&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Writing scenarios &lt;em&gt;with your customers&lt;/em&gt; will help you to understand what your
application needs to do, and automating those scenarios with cucumber will help
you to know when the application meets those needs. Just don&amp;rsquo;t fall into the
trap of thinking you can use cucumber to test the app completely at the expense
of unit tests or &lt;em&gt;Lots of Scenarios&lt;/em&gt; and a &lt;em&gt;Big Ball of Mud&lt;/em&gt; will be your
reward.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Discovering BDD</title>
    <link rel="alternate" href="http://tooky.co.uk/discovering-bdd/"/>
    <id>http://tooky.co.uk/discovering-bdd/</id>
    <published>2013-12-11T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I graduated from UMIST in 2002 with a Software Engineering degree, and I started work with a company who provided document scanning services, mostly to the public sector - NHS trusts and local authorities. I came into the company thinking I knew it all - I had a software engineering degreee!&lt;/p&gt;

&lt;p&gt;Wow - I had a &lt;em&gt;LOT&lt;/em&gt; to learn!&lt;/p&gt;

&lt;p&gt;I met Shane Paterson while I was there. Shane was another developer at the company, and even though he was based in New Zealand, he was responsible for pointing me in the direction of XP and TDD. There&amp;rsquo;s some more about this story in the &lt;a href="http://chimera.labs.oreilly.com/books/1234000001813/ch04.html#solution_id19"&gt;Apprenticeship Patterns&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;I started reading a lot of blogs and participating in the various mailing lists. I found an &lt;a href="http://groups.yahoo.com/neo/groups/extremeprogramming/conversations/messages/116122"&gt;old post&lt;/a&gt; on the XP mailing list where I was introducing a colleague to TDD using the bowling game kata which made me smile as I used the same exercise during some recent ruby/tdd training.&lt;/p&gt;

&lt;p&gt;This colleague and I were about to start working on the new version of our main software application. A decision had been taken to rewrite the application with a completely new look and feel, to move to the new (at the time) .NET technology stack and to support MS SQL server as well as MS Access. The company had great success with application up until then because it could be set up and installed by anyone with file sharing permissions, so no need to involve corporate IT. This kind of culture was coming to an end though, so we needed to fit in with what the IT departments demanded.&lt;/p&gt;

&lt;p&gt;We ran it as close to a proper XP project as the business would allow. In particular we were pair programming and we were writing our tests first! Not just unit tests, we were also writing acceptance tests with our &amp;lsquo;customer&amp;rsquo; to help us understand the requirements.&lt;/p&gt;

&lt;p&gt;We used a tool called &lt;a href="http://en.wikipedia.org/wiki/Framework_for_Integrated_Test"&gt;FIT&lt;/a&gt;. This allowed us to create word documents (!!) that contained tables of examples of what the software should do. We would then hook these tables up to some test classes which would run the tests and colour the tables appropriately.&lt;/p&gt;

&lt;p&gt;Using tables to describe the requirements was fantastic. We were able to communicate clearly with our project sponsors about the business rules, using concrete examples to support our understanding.&lt;/p&gt;

&lt;p&gt;Brian Marick&amp;rsquo;s foreword from the book really sums up what the FIT community were trying to do:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A software project is a place where different cultures come together. Some people face towards the business and its concerns; other people face toward the computer and its demands.&lt;/p&gt;

&lt;p&gt;To an expert in financial trading, a &amp;ldquo;bond&amp;rdquo; is something that&amp;rsquo;s tangled up in all sorts of explicit and implicit legal, social, historical and emotional meanings.&lt;/p&gt;

&lt;p&gt;To programmers, a Bond is an object in their program that they&amp;rsquo;re trying to keep from getting too tangled up with other objects, lest their brains explode.&lt;/p&gt;

&lt;p&gt;Somehow these people have to work together, and they do it by creating a shared language. Most of that creating happens through the conversation that threads through the whole project. But some of it happens through writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian Marick, Feb 2005 (foreword of &lt;a href="http://www.pearsoned.co.uk/bookshop/detail.asp?item=100000000079971"&gt;Fit for Developing Software&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At about the same time as this I came across the term &lt;em&gt;Behaviour Driven Development&lt;/em&gt; in &lt;a href="http://blog.daveastels.com/2005/07/a-new-look-at-test-driven-development/"&gt;this post&lt;/a&gt; by Dave Astels. It was about trying to change the focus of TDD from testing to specifying behaviour.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The problem I have with TDD is that its mindset takes us in a different direction… a wrong direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to start thinking in terms of behavior specifications, not verification tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The value of doing this will be thinking more clearly about each behaviour, relying less on testing by class or by method, and having better executable documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since TDD is what it is, and everyone isn’t about to change their meaning of that name (nor should we expect them to), we need a new name for this new way of working… BDD: Behaviour Driven Development.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post really struck a chord with me. I was still getting to grips with TDD but when it had worked well for me it was when I was working how Dave described. The timing of this is a little fuzzy for me now, but it was right around the time I first started to use Ruby and Rails, so I picked up RSpec as my testing tool of choice.&lt;/p&gt;

&lt;p&gt;The FIT toolchain didn&amp;rsquo;t exist in ruby, but in August 2007 the &lt;a href="http://rubyforge.org/pipermail/rspec-devel/2007-August/003756.html"&gt;RSpec Story Runner was released&lt;/a&gt; which gave us the tools to do similar things in ruby. The story runner gave way to &lt;a href="http://cukes.info/"&gt;cucumber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cucumber and Gherkin (the formal language for writing cucumber specifcations), have spread. It is now possible to write Gherkin specifications &lt;a href="https://github.com/cucumber/cucumber-jvm"&gt;on&lt;/a&gt; &lt;a href="https://github.com/cucumber/cucumber-js"&gt;a&lt;/a&gt; &lt;a href="http://www.specflow.org/"&gt;huge&lt;/a&gt; &lt;a href="https://github.com/cucumber/cucumber-cpp"&gt;range&lt;/a&gt; &lt;a href="http://behat.org/"&gt;of&lt;/a&gt; &lt;a href="https://github.com/gabrielfalcao/lettuce"&gt;platforms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think I made a mistake using these tools that many people have done. I used them to write tests. Sometimes they were very brittle tests, &lt;a href="http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/"&gt;overly focussed on the view&lt;/a&gt;. Often they were boring lists of instructions. I learnt to be more &lt;a href="http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html"&gt;declarative&lt;/a&gt;, and my tests became more readable. But&amp;hellip;&lt;/p&gt;

&lt;p&gt;They were still written as tests by me (and my colleagues) for the computer to run. &lt;a href="http://lizkeogh.com/2011/03/04/step-away-from-the-tools/"&gt;BDD isn&amp;rsquo;t about the tools&lt;/a&gt; its about the &lt;a href="http://dannorth.net/2010/08/30/introducing-deliberate-discovery/"&gt;discovery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;BDD enables communication. Our teams are made up of those who need the capabilities some new software will provide, and those who are able to create that software. These people come from different backgrounds, different experiences. Using stories and examples helps to create a shared language which we can then use to explore the problem space and begin to discover the things we don&amp;rsquo;t know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Learning by Teaching</title>
    <link rel="alternate" href="http://tooky.co.uk/learning-by-teaching/"/>
    <id>http://tooky.co.uk/learning-by-teaching/</id>
    <published>2013-11-06T00:00:00+00:00</published>
    <updated>2013-12-18T12:36:38+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;For the last few weeks I&amp;rsquo;ve been working with &lt;a href="http://kickstartacademy.io/"&gt;Kickstart Academy&lt;/a&gt; teaching the &lt;a href="https://www.onthebeach.co.uk/"&gt;On The Beach&lt;/a&gt; ruby academy. We&amp;rsquo;ve been introducing a group of graduate and experienced developers to software development using ruby, bdd and git. Much of the teaching in the academy was based on ideas from &lt;a href="http://www.bowperson.com/books.htm"&gt;Training from the Back of the Room&lt;/a&gt; by Sharon Bowman and I wanted to share one of the exercises that we ran.&lt;/p&gt;

&lt;p&gt;Bowman&amp;rsquo;s book has had quite an influence on the way that I approach training. The book focuses on leaving behind traditional training methods where learners are a passive audience as the trainer pushes information through lectures and slides. Instead, Bowman suggests that trainers should try to connect learners to past experiences, use shorter presented segments, and focus on giving learners lots of oppurtunity for concrete practice through exercises and activities.&lt;/p&gt;

&lt;p&gt;Another major theme in the book is the idea that trainers should &amp;ldquo;step aside&amp;rdquo; and let the learners teach and learn from each other. This really stood out to me as I have found that whenever I&amp;rsquo;m teaching something to someone else, it helps me understand it more.&lt;/p&gt;

&lt;p&gt;We set the group a task to go and spend some time researching the &lt;a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)"&gt;SOLID principles&lt;/a&gt;. They worked in twos or threes and each group took one of the principles.&lt;/p&gt;

&lt;p&gt;We gave them 45 minutes to produce a poster about the principle before we got back together and presented back to the group. Each group had the chance to think about their principle and how it affected some of the things we&amp;rsquo;d been working on. After each presentation we had a group discussion about the benefits and drawbacks that following the principle presented. Working through them together made the connections between the principles obvious.&lt;/p&gt;

&lt;p&gt;This exercise, it&amp;rsquo;s output and the discussion between the learners really highlighted to me the role of a trainer. As a trainer we aren&amp;rsquo;t there to teach, or to talk at learners. We are trying to facilitate learning. We want to create an environment where the learners are able to discover ideas and try them out for themselves, offering guidance and help when they are stuck. Not only does this make the training more interesting and relevant for the learners, but it makes it more satisfying to teach. You get fast feedback about how the group are doing, and what topics you might need to spend more time on.&lt;/p&gt;

&lt;p&gt;Here are the posters the group created.&lt;/p&gt;

&lt;h3&gt;Single Responsibility Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Single Responsibility Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/single-responsibility.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Open-Closed Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Open-Closed Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/open-closed.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Liskov Substitution Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Liskov Substitution Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/liskov-substitution.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Interface Segregation Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Interface Segregation Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/interface-segregation.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Dependency Inversion Principle&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Dependency Inversion Principle" src="https://dl.dropboxusercontent.com/u/41915/otb-solid/dependency-inversion.jpg" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stop Writing Scenarios That Test Everything Through The View</title>
    <link rel="alternate" href="http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/"/>
    <id>http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/</id>
    <published>2013-10-29T00:00:00+00:00</published>
    <updated>2014-06-10T07:02:29+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Following on from my &lt;a href="http://tooky.co.uk/this-gherkins-not-for-reading/"&gt;last post&lt;/a&gt;, I wanted to mention a common anti-pattern that &lt;a href="http://blog.8thlight.com/kevin-liddle/2013/09/18/a-case-against-cucumber.html"&gt;Kevin&amp;rsquo;s case against cucumber&lt;/a&gt; mentioned. Scenarios that are too focussed on the user interface. Scenarios written as an imperative set of instructions for a machine to follow.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Scenarios like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight gherkin"&gt;&lt;span class="nf"&gt;Given&lt;/span&gt; I go to the homepage
&lt;span class="nf"&gt;And&lt;/span&gt; I fill in my username
&lt;span class="nf"&gt;And&lt;/span&gt; I click sign in
&lt;span class="nf"&gt;When&lt;/span&gt; I click &lt;span class="s"&gt;"Accounts"&lt;/span&gt;
&lt;span class="nf"&gt;Then&lt;/span&gt; I see &lt;span class="s"&gt;"Current Account"&lt;/span&gt;
&lt;span class="nf"&gt;And&lt;/span&gt; I see &lt;span class="s"&gt;"Savings Account"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There has been quite a lot written about this, the &lt;a href="http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html"&gt;canonical post&lt;/a&gt; is from 2008. The cucumber team made a mistake including &lt;code&gt;web_steps.rb&lt;/code&gt; - they were &lt;a href="https://github.com/cucumber/cucumber-rails/commit/f027440965b96b780e84e50dd47203a2838e8d7d"&gt;removed&lt;/a&gt; 2 years ago.&lt;/p&gt;

&lt;p&gt;The problem here isn&amp;rsquo;t just isolated to the imperative style of this scenario, but also that the scenario is highly coupled to the view.&lt;/p&gt;

&lt;p&gt;Testing through the view is something you have to be wary of with any tool. It&amp;rsquo;s slow and brittle. That isn&amp;rsquo;t to say it has no value, but you don&amp;rsquo;t need every test to go through the UI. Beware the &lt;a href="http://watirmelon.com/2012/01/31/introducing-the-software-testing-ice-cream-cone/"&gt;ice cream cone&lt;/a&gt; anti-pattern.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve written a little more about this &lt;a href="http://tooky.co.uk/cucumber-and-full-stack-testing/"&gt;here&lt;/a&gt;, Seb has introduced the &lt;a href="http://claysnow.co.uk/the-testing-iceberg/"&gt;Testing Iceberg&lt;/a&gt; and &lt;a href="http://mattwynne.net"&gt;Matt&lt;/a&gt; talks more about it &lt;a href="http://skillsmatter.com/podcast/agile-testing/why-your-step-definitions-should-be-one-liners-and-other-pro-tips"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This Gherkin's Not For Reading</title>
    <link rel="alternate" href="http://tooky.co.uk/this-gherkins-not-for-reading/"/>
    <id>http://tooky.co.uk/this-gherkins-not-for-reading/</id>
    <published>2013-10-24T01:00:00+01:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Recently &lt;a href="http://www.8thlight.com/our-team/kevin-liddle"&gt;Kevin Liddle&lt;/a&gt; made his &lt;a href="http://blog.8thlight.com/kevin-liddle/2013/09/18/a-case-against-cucumber.html"&gt;case against cucumber&lt;/a&gt;. In the article he outlines several problems he experiences working with cucumber. One of his key arguments is that non-technical team members don&amp;rsquo;t read the scenarios written by developers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In theory, this is a valuable thing, a bridge between the divergent worlds of
developers and managers. In practice, however, I’ve never seen Cucumber used
this way. Non-technical people don’t read code, no matter how easy it is to
read. They care about the actual use cases and that means using the
application. And if they use the application, who cares if there is some text
claiming the application works!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So why don&amp;rsquo;t non-technical people read the scenarios written by developers or testers?&lt;/p&gt;

&lt;p&gt;Because they aren&amp;rsquo;t written for non-technical people to read! They probably aren&amp;rsquo;t even written with non-technical people in mind. They are written as a test script, they are written as a set of instructions for a computer to follow so they can execute a test plan. At best they&amp;rsquo;re written as set of steps that the developer will go through to get the feature finished.&lt;/p&gt;

&lt;p&gt;Gherkin isn&amp;rsquo;t a scripting language for tests. Cucumber isn&amp;rsquo;t a testing tool. BDD isn&amp;rsquo;t a testing process. Kevin says that &amp;ldquo;non-technical people don&amp;rsquo;t read code&amp;rdquo; and that they &amp;ldquo;care about the actual use cases&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t want them to read our code, or our test plans. We want to talk to them about the behaviour, we want to discuss the impact they are looking to create and collaborate on how we can achieve that.&lt;/p&gt;

&lt;p&gt;Gherkin&amp;rsquo;s value isn&amp;rsquo;t when it&amp;rsquo;s read. It&amp;rsquo;s when it&amp;rsquo;s written - it&amp;rsquo;s value is as a communication tool. It is close enough to natural language that both technical and non-technical people can collaborate but it has enough constraints to encourage thinking in terms of behaviour.&lt;/p&gt;

&lt;p&gt;Writing scenarios with non-technical people, allows you to document the conversations you have about the behaviour of the system. It provides an avenue to explore new features and their value without building anything.&lt;/p&gt;

&lt;p&gt;Kevin&amp;rsquo;s article goes on to highlight the value of gherkin when &amp;ldquo;gathering requirements&amp;rdquo;, but he argues that automating those scenarios using cucumber adds a level of overhead and’ indirection that is not worthwhile.&lt;/p&gt;

&lt;p&gt;I have more to say about that, but that&amp;rsquo;s another post.&lt;/p&gt;

&lt;p&gt;For now try sitting down with with your stakeholders and use gherkin to document examples of how they expect your software to behave. Use those examples to help you when you&amp;rsquo;re writing the code, but also check the assumptions with other people on the team. Do other non-technical stakeholders find them more readable?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cucumber and Full Stack Testing</title>
    <link rel="alternate" href="http://tooky.co.uk/cucumber-and-full-stack-testing/"/>
    <id>http://tooky.co.uk/cucumber-and-full-stack-testing/</id>
    <published>2013-01-18T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;There has been two similar questions asked on two different mailing lists I subscribe to (Corey Haines&amp;rsquo; &lt;a title="Build an app with Corey Haines" href="http://www.cleancoders.com/codecast/bawch-episode-1/show"&gt;BAWCH&lt;/a&gt; mailing list, and &lt;a href="http://rubyrogues.com/"&gt;Ruby Rogues&lt;/a&gt; Parley list). Both of these lists are private so I thought it would be worthwhile posting my answer here.&lt;/p&gt;

&lt;p&gt;Both of the questions were concerned with out-side-in development, full-stack integration testing, and how much of the application needs to be tested through the entire system.&lt;/p&gt;

&lt;p&gt;Firstly consider why we write &lt;a href="http://cukes.info/"&gt;cucumber&lt;/a&gt; scenarios (or &lt;a href="http://fitnesse.org/"&gt;fitnesse&lt;/a&gt; test cases). These tests are business facing acceptance tests. They are a medium through which we can engage with the business people on our team and to help us understand how the system should behave. They give us an opportunity to check &lt;em&gt;our&lt;/em&gt; understanding of what the system should do &amp;mdash; to check the &lt;em&gt;business&lt;/em&gt;&amp;rsquo;s understanding of what the system should do. We automate these tests to give the business confidence that the system behaves as expected.&lt;/p&gt;

&lt;p&gt;Full-stack, end-to-end, integration tests are there to give us confidence that the system fits together correctly, that we have all the different pieces in place, and they are able to talk to each other.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very easy to conflate these two concerns. I have worked on many systems where the business facing acceptance tests were also the end-to-end integration tests. The test runs end up being slow, and the tests are cumbersome to work with.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been talking about this with &lt;a href="https://twitter.com/mattwynne"&gt;Matt Wynne&lt;/a&gt; and he drew the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Business Facing Acceptance Tests vs End-To-End Tests" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/business-facing-vs-end-to-end.png" /&gt;&lt;/p&gt;

&lt;p&gt;The circle on the left represents the tests that we would write in cucumber (or fitnesse). The circle on the right the tests which exercise the whole system end-to-end. In the centre we have the intersection &amp;mdash; our cucumber scenarios which we run end-to-end against the whole system.&lt;/p&gt;

&lt;p&gt;The key thing is that your business acceptance tests do not all have to drive the whole system end-to-end. We only a need a few scenarios to go end-to-end to give us the confidence the system as a whole is working. We can also write system tests, that aren&amp;rsquo;t part of the acceptance suite, to test specific integrations&lt;/p&gt;

&lt;p&gt;Try to write acceptance tests that directly drive the domain objects. Use these to accurately describe your application&amp;rsquo;s behaviour. Focus them on the behaviour by not having them integrate the UI and the database.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Delegation is not inheritance</title>
    <link rel="alternate" href="http://tooky.co.uk/delegation-is-not-inheritance/"/>
    <id>http://tooky.co.uk/delegation-is-not-inheritance/</id>
    <published>2012-08-08T01:00:00+01:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;On the train home last night I watched the excellent &lt;a href="https://peepcode.com/products/play-by-play-jimweirich-ruby"&gt;Jim Weirich Play-by-play&lt;/a&gt; from &lt;a href="https://peepcode.com/"&gt;PeepCode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the screencast Jim develops a library that &amp;ldquo;protects against unauthorized data model modification by users in less-privileged roles.&amp;rdquo; The screencast provides a great insight into the way Jim approaches problems, designs apis, and how he&amp;rsquo;s customised his environment to suit the way he works.&lt;/p&gt;

&lt;p&gt;His approach is to build a proxy object which wraps the object to be updated, and provides a whitelist for fields which can be updated. He also inadvertantly demonstrates an easy mistake to make when using proxy objects.&lt;/p&gt;

&lt;p&gt;Here is a simplified version of Jim&amp;rsquo;s solution -  without any of the api for creating / finding proxies - which we will use to demonstrate this pitfall and its effects.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'delegate'&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProtectionProxy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;writable_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@writable_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writable_fields&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_with?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@writable_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach works great for silently dropping calls to the accessor methods that are not in the provided whitelist. Here are some rspec examples which show how it works.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec-given'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'protection_proxy'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:membership_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;ProtectionProxy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Jim"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"jim@somewhere"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Beginner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="no"&gt;Given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:proxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;ProtectionProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:membership_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="no"&gt;Then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Jim"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"when modifiying a writable field"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;When&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Advanced"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="no"&gt;Then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_level&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Advanced"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"when modifiying a non-writable field"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;When&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Joe"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="no"&gt;Then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Jim"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we imagine we have a rails project, we can create a proxy to wrap our ActiveRecord object, and specify an attribute whitelist.  This should then prevent mass-assignment of any non-whitelist attributes - it could be used in a controller like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ProtectionProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="c1"&gt;# happy path&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="c1"&gt;# error&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately this won&amp;rsquo;t work as we might expect.&lt;/p&gt;

&lt;p&gt;Proxying like this is a great way to add new behaviour to existing objects, without modifying them - or creating new subclasses. but there is one thing to be aware of when you are using delegation in this way.&lt;/p&gt;

&lt;p&gt;Methods called on the wrapped object have &lt;strong&gt;no&lt;/strong&gt; knowledge of the methods in the proxy object.&lt;/p&gt;

&lt;p&gt;So what happens when we call &lt;code&gt;proxy.update_attributes&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The proxy object immediately delegates that method call to the user object, it will call &lt;code&gt;user.update_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you have used ActiveRecord, you will be aware of the way that &lt;code&gt;ActiveRecord::Base#update_attrbiutes&lt;/code&gt; will make use of the accessor methods on its instances to set the field names.&lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;user.update_attributes name: &amp;#39;Joe&amp;#39;&lt;/code&gt; will call &lt;code&gt;user.name = &amp;#39;Joe&amp;#39;&lt;/code&gt;, not the accessor methods on the proxy.&lt;/p&gt;

&lt;p&gt;&lt;img alt="update attributes sequence diagram" src="http://dl.dropbox.com/u/41915/update_attributes_sequence_diagram.png" /&gt;&lt;/p&gt;

&lt;p&gt;As we are not calling the accessor methods on the proxy, we aren&amp;rsquo;t filtering out the fields that don&amp;rsquo;t appear in the whitelist and our attribute protection won&amp;rsquo;t work when we use &lt;code&gt;update_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is another example. &lt;code&gt;Capitalise&lt;/code&gt; wraps an object and provides a upper case version of its name method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'delegate'&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Capitalise&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="vi"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;
    &lt;span class="s2"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'john'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;capital_john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capitalise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; "Hello, john"&lt;/span&gt;
&lt;span class="n"&gt;capital_john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; "Hello, john"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;greet&lt;/code&gt; is defined in the &lt;code&gt;Person&lt;/code&gt; class, when it calls &lt;code&gt;name&lt;/code&gt; it will always call &lt;code&gt;Person#name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This has caught me out a couple times. It&amp;rsquo;s so easy in ruby to create proxy objects or decorators that its easy to forget that you have a different object.&lt;/p&gt;

&lt;p&gt;One solution is to implement a version of &lt;code&gt;update_attributes&lt;/code&gt; on the proxy object.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProtectionProxy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;writable_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;
    &lt;span class="vi"&gt;@writable_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writable_fields&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="vi"&gt;@writable_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="vi"&gt;@object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_attributes&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we add an &lt;code&gt;update_attributes&lt;/code&gt; method to the &lt;code&gt;ProtectionProxy&lt;/code&gt; class - this only allows attributes allowed by the whitelist through to &lt;code&gt;User#update_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://peepcode.com/products/play-by-play-jimweirich-ruby"&gt;screencast&lt;/a&gt; ends with a note that Jim noticed this error later after recording of the screen cast finished. Jim&amp;rsquo;s complete solution, including the nice api, can be found on &lt;a href="https://github.com/jimweirich/protection_proxy"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/3294185.js"&gt;Here is the whole of the &lt;code&gt;ProxyProtection&lt;/code&gt; implementation&lt;/a&gt;, with rspec examples.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tracking Project Emotions Using MercuryApp</title>
    <link rel="alternate" href="http://tooky.co.uk/tracking-project-emotions-using-mercury-app/"/>
    <id>http://tooky.co.uk/tracking-project-emotions-using-mercury-app/</id>
    <published>2010-11-23T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been trying out &lt;a href="http://mercuryapp.com"&gt;MercuryApp&lt;/a&gt; as a way to track how I&amp;rsquo;m feeling about a project we&amp;rsquo;ve just started. I&amp;rsquo;m tracking once a day, usually at about 4pm.&lt;/p&gt;

&lt;p&gt;We try to run regular retrospectives on our projects, this gives us a chance to reflect on how the project is going. We often include a segment where each participant draws a &amp;lsquo;sparkline&amp;rsquo; of how they were feeling over the period of time leading up to the retrospective. This let&amp;rsquo;s us see how various events effect peoples emotions.&lt;/p&gt;

&lt;p&gt;This time I had my sparkline already. &lt;a href="http://mercuryapp.com"&gt;MercuryApp&lt;/a&gt; had been tracking this data for me all week. The surprise for me though was that I seemed to be more upbeat about things than I remembered. If I hadn&amp;rsquo;t had &lt;a href="http://mercuryapp.com"&gt;MercuryApp&lt;/a&gt; I&amp;rsquo;m sure my sparkline would have been less positive.&lt;/p&gt;

&lt;p&gt;I suspect that the negatives I perceived were something to do with my mood at the time of the retrospective. It as towards the end of the day so I was tired, and I&amp;rsquo;d had a tough day.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m guessing that had my day been better, and I was in a more positive mood then my sparkline may well have been influenced in the other direction.&lt;/p&gt;

&lt;p&gt;Having real data is great, not only is it more accurate when thinking about the previous week, but looking at how it differs from your perception gives you the chance to reflect on your mood right now! Liking the results from &lt;a href="http://mercuryapp.com"&gt;MercuryApp&lt;/a&gt; so far.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: &lt;a href="http://edendevelopment.co.uk"&gt;Eden Development&lt;/a&gt; have been working with the guys at &lt;a href="http://mercuryapp.com"&gt;MercuryApp&lt;/a&gt;, but I have not been involved in the project.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fixing "There was a problem with the editor 'vi'" for Git on Mac OS X Snow Leopard</title>
    <link rel="alternate" href="http://tooky.co.uk/there-was-a-problem-with-the-editor-vi-git-on-mac-os-x/"/>
    <id>http://tooky.co.uk/there-was-a-problem-with-the-editor-vi-git-on-mac-os-x/</id>
    <published>2010-04-08T01:00:00+01:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I have had an annoying problem with git and vi. I like to use vim to edit my commit messages, but I&amp;rsquo;ve been hit with this annoying message every time I write the message and quit vim.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;error: There was a problem with the editor 'vi'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a little bit of digging I found that this message is shown by git when the editor exits with a non-zero exit code. You can use &lt;code&gt;$?&lt;/code&gt; to see the exit code of last script or application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ vim     # then exit vim with :q immediately
$ echo $?
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m still not sure why vim is exiting with non-zero exit code, but it is definitely related to my &lt;code&gt;.vimrc&lt;/code&gt; - moving it to &lt;code&gt;.vimrc.bak&lt;/code&gt; seemed to fix the problem. I&amp;rsquo;m using the excellent &lt;a href="http://www.vim.org/scripts/script.php?script_id=2332"&gt;pathogen&lt;/a&gt; plugin to manage my vimfiles, so I plan to go through that and my installed plugins to find the cause of the problem.&lt;/p&gt;

&lt;p&gt;There is a fix though, I&amp;rsquo;m not sure what&amp;rsquo;s causing this, but I found a &lt;a href="http://groups.google.com/group/vim_mac/browse_thread/thread/0d33e2f2130867b0"&gt;post on the vim-mac mailing list&lt;/a&gt; which shows this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ vim          # and exit with :q
$ echo $?
1
$ /usr/bin/vim # and exit with :q
$ echo $?
0
$ which vim
/usr/bin/vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running vim with &lt;code&gt;/usr/bin/vim&lt;/code&gt; seems to make it exit cleanly. So to fix the problem with git commit you just need to run this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;$ git config --global core.editor /usr/bin/vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d still like to get to the root of the problem, but this gets me my git commit messages back!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I think you should go to a code retreat</title>
    <link rel="alternate" href="http://tooky.co.uk/why-i-think-you-should-go-to-a-coderetreat/"/>
    <id>http://tooky.co.uk/why-i-think-you-should-go-to-a-coderetreat/</id>
    <published>2010-03-17T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Last Saturday I went along to the UK leg of &lt;a href="http://coreyhaines.com/"&gt;Corey Haines&lt;/a&gt; &lt;a href="http://www.coderetreat.com/how-it-works.html"&gt;Code Retreat tour&lt;/a&gt;. Apart from the early start it was a really interesting day, and I really enjoyed the chance to &lt;a href="http://twitter.com/despo"&gt;pair&lt;/a&gt; &lt;a href="http://twitter.com/morty_uk"&gt;with&lt;/a&gt; &lt;a href="http://twitter.com/duncanbutler"&gt;lots&lt;/a&gt; of new people.&lt;/p&gt;

&lt;p&gt;The day was pretty tiring, pairing is always an intense experience, but I definitely learnt quite a lot. Its amazing how much fun working on the same problem several times in a row is, and how different approaches affect the way you think about it. By repeating the problem you allow your brain to concentrate on how you are solving it, rather than the problem itself. This gives you a really different perspective and is something I want to explore more.&lt;/p&gt;

&lt;p&gt;There were so many things that I took away from the day, some of them are already changing my approach to building software:&lt;/p&gt;

&lt;h3&gt;45 minutes is a really short amount of time&lt;/h3&gt;

&lt;p&gt;The format of the code retreat is to work on the problem with a pair for 45 minutes. When the time is up, you delete all your code, and take break. Spend 15 minutes grabbing a coffee, reflecting on what you&amp;rsquo;ve done, and finding your next pair. Rinse and repeat.&lt;/p&gt;

&lt;p&gt;Every 45 minute session flew by. Even so, with each pairing I was surprised at how far we&amp;rsquo;d managed to get. But what really surprised me, was how useful the short break and change of partner proved to be. The break gave you a real chance to reconsider your assumptions. That little bit of perspective was great in kick starting the next session.&lt;/p&gt;

&lt;p&gt;It really surprised me how easy it was to swap pairs. Granted, everybody had been thinking about the same problem. But everyone was using a different approach, and sometimes a different language. The context switching didn&amp;rsquo;t seem to affect anybody. The new combinations brought new ideas and really contributed to the success of the day.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been trying the &lt;a href="http://www.pomodorotechnique.com/"&gt;pomodoro technique&lt;/a&gt; at work. I know I&amp;rsquo;ve been a bit resistant to stopping when the timer goes. I always feel like I should just get the rest of my ideas out before I take break, but based on my experience at code retreat, I think the short break from the problem will turn out to be a real benefit. I&amp;rsquo;m determined to try and do it properly and see how it works out.&lt;/p&gt;

&lt;p&gt;I also want to try and swap pairs more often. I think that the new perspective a new pair will bring to a problem will really help to come to the best solution.  I&amp;rsquo;m not sure about every hour, but once or twice a day should be achievable.&lt;/p&gt;

&lt;h3&gt;Pairing is a great way to share insights and learning&lt;/h3&gt;

&lt;p&gt;Leading on from the new perspective a new pair brings is also the amount of shared learning that happens when your pairing. I learnt something from everyone I paired with. Not just how to approach the problem, but new things about the language, the tools. In a team, pairing will really help to bring every team member up to speed on any new part of the code base or library added. Switching often will make this happen even faster.&lt;/p&gt;

&lt;h3&gt;If you don&amp;rsquo;t need the infrastructure yet, don&amp;rsquo;t build it&lt;/h3&gt;

&lt;p&gt;Why do you need to build a class to make your first spec pass? Why not just write the code you need in the spec? Then write the next spec, and the code to pass it in that spec. As soon as you start to see shared behaviour extract a method. When specs are using the same state and the same methods extract a class.&lt;/p&gt;

&lt;p&gt;Working like this is &lt;em&gt;really&lt;/em&gt; hard, but its amazing how the design you need just starts to show itself. &lt;/p&gt;

&lt;h3&gt;Look at one behaviour at a time by isolating it using canned responses&lt;/h3&gt;

&lt;p&gt;Most of the code we write doesn&amp;rsquo;t split up nicely into discreet chunks of behaviour. We build systems that rely on several pieces all working together to produce complicated behaviour. Complexity is difficult to define, so to make it easier we need to try to isolate the part that we&amp;rsquo;re interested in right now.  We can use simple objects that return canned responses, this allows us to consider only the behaviour we care about now.&lt;/p&gt;

&lt;h3&gt;Keeping things really simple is really hard&lt;/h3&gt;

&lt;p&gt;Corey was continually encouraging us to keep things simple. Its amazing how often you think your doing something as simply as possible, and then someone comes along and makes it even simpler. Simple is good, it allows you to work on one thing at a time, and not get bogged down in things that don&amp;rsquo;t matter &lt;em&gt;right now&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;A lot of the direction at code retreat was about ways to keep things simple, to specify only the smallest piece of behaviour. Writing the code in the spec at first, and using &amp;lsquo;doubles&amp;rsquo; to isolate behaviour are both great techniques to help you do that.&lt;/p&gt;

&lt;p&gt;One of the main things I&amp;rsquo;m taking away from code retreat is to work hard at writing smaller, more focussed specs.&lt;/p&gt;

&lt;p&gt;If there&amp;rsquo;s a &lt;a href="http://www.coderetreat.com/"&gt;code retreat&lt;/a&gt; near you I really encourage you to go along. If there isn&amp;rsquo;t join the &lt;a href="http://coderetreat.ning.com/"&gt;community&lt;/a&gt; and see if there&amp;rsquo;s anyone else who would be interested in helping get one organised.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to say thank you to &lt;a href="http://coreyhaines.com/"&gt;Corey Haines&lt;/a&gt;, the sponsors &lt;a href="http://riverglide.com/"&gt;RiveGlide&lt;/a&gt; and &lt;a href="http://edendevelopment.co.uk/"&gt;Eden Development&lt;/a&gt;, all of the attendees, and of course &lt;a href="http://www.bletchleypark.org.uk/"&gt;Bletchley Park&lt;/a&gt; and the &lt;a href="http://www.tnmoc.org/"&gt;The National Museum of Computing&lt;/a&gt; for making the day such a great success.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Exploring Harmony for javascript BDD with RSpec</title>
    <link rel="alternate" href="http://tooky.co.uk/exploring-harmony-for-unit-testing-with-rspec/"/>
    <id>http://tooky.co.uk/exploring-harmony-for-unit-testing-with-rspec/</id>
    <published>2010-03-02T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;We try to BDD all of our production code, but the one area we always seem to struggle with is our javascript. There are various test/spec frameworks for javascript, but we&amp;rsquo;ve never quite found one we&amp;rsquo;ve been totally happy with.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a fair amount of interest lately in a new ruby gem which allows you to execute javascript against a DOM from within a ruby process. &lt;a href="http://github.com/mynyml/harmony"&gt;Harmony&lt;/a&gt; uses &lt;a href="http://github.com/jbarnette/johnson/"&gt;Johnson&lt;/a&gt; a ruby wrapper for the &lt;a href="http://www.mozilla.org/js/spidermonkey/"&gt;Mozilla SpiderMonkey&lt;/a&gt; javascript runtime.&lt;/p&gt;

&lt;p&gt;To get started figuring out how I might be able to integrate harmony into my workflow, I&amp;rsquo;ve created a very simple &lt;a href="http://gist.github.com/319235"&gt;project&lt;/a&gt; which uses rspec to make some very simple assertions about javascript behaviour.&lt;/p&gt;

&lt;p&gt;&lt;script src="http://gist.github.com/319235.js?file=rspec_with_harmony.rb"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The 3rd and 4th specs are probably the most interesting. They show how how you can use an HTML fixture file, and load the javascript you want to test. This feels like a nice way of isolating your javascript, and would probably encourage me to write much more modular javascript.&lt;/p&gt;

&lt;p&gt;Please fork the &lt;a href="http://gist.github.com/319235"&gt;gist&lt;/a&gt; and play with some more detailed specs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Remote pairing with GNU Screen and Vim</title>
    <link rel="alternate" href="http://tooky.co.uk/remote-pairing-with-gnu-screen-and-vim/"/>
    <id>http://tooky.co.uk/remote-pairing-with-gnu-screen-and-vim/</id>
    <published>2010-01-08T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;All the recent &lt;a href="http://search.twitter.com/search?q=%23uksnow"&gt;#uksnow&lt;/a&gt; has left the &lt;a href="http://edendevelopment.co.uk/blogs/company/2009/11/28/welcome-to-our-new-office/"&gt;Eden studio&lt;/a&gt; a little deserted. With several of us having longish drives in to the office, we&amp;rsquo;ve been forced to get much better at remote pairing.&lt;/p&gt;

&lt;p&gt;In the past we&amp;rsquo;ve used iChat screen sharing in the office for pairing on laptops, but with two people both at the end of a DSL connection, the screen + voice bandwidth demands are pretty high, and the guest user is at a painful disadvantage.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt; is currently undergoing something of a rennaisance at &lt;a href="http://edendevelopment.co.uk"&gt;Eden Development&lt;/a&gt;. Several of us have been trying to use it for all our coding. Fortunately this has stood us in good stead to take advantage of a great low bandwidth pair programming solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.gnu.org/software/screen/"&gt;GNU Screen&lt;/a&gt; + &lt;a href="http://www.vim.org/"&gt;vim&lt;/a&gt; (+ &lt;a href="http://skype.com"&gt;skype&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;John Haruska gives a great &lt;a href="http://haruska.com/2009/09/29/remote-pair-programming/"&gt;overview of different remote pairing solution&lt;/a&gt; and outlines how to use screen to set up a shared terminal. Unfortunately we weren&amp;rsquo;t able to use the acl method to allow different UNIX users to share a &amp;lsquo;screen&amp;rsquo; on our macs, but if both users logged in to the same unix account it worked like a dream.&lt;/p&gt;

&lt;p&gt;Our basic process is:&lt;/p&gt;

&lt;p&gt;User 1 sets up a screen as a shared user on the host machine&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;pairing$ screen -S pairing
Ctrl-a :multiuser on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User 2, logs into the maching via ssh, and connects to the shared screen&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;local$ ssh pairing@shared_machine
pairing$ screen -x pairing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s basically it. Both users then have access to a full shared terminal environment. A shared screen can have multiple windows, so we tend to work with one screen for vim and another for running tests and other terminal commands. We also make extensive use of &lt;a href="http://www.linux.com/archive/articles/59533"&gt;vim tabs&lt;/a&gt; and shell execution from within vim.&lt;/p&gt;

&lt;p&gt;A couple of tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make use of the &lt;a href="http://www.samsarin.com/blog/2007/03/11/gnu-screen-working-with-the-scrollback-buffer/"&gt;GNU screen scrollback buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;remote pairing can be quite intense, we find using &lt;a href="http://www.pomodorotechnique.com/"&gt;The Pomodoro Technique&lt;/a&gt; really useful in helping combat that - see &lt;a href="http://tomatoi.st/"&gt;http://tomatoi.st/&lt;/a&gt; for a shared timer.&lt;/li&gt;
&lt;li&gt;audio is essential, but having a video link is even better&lt;/li&gt;
&lt;li&gt;SSH requires some kind of NAT/firewall traversal - we found it simplest to just connect to the office vpn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://edendevelopment.co.uk/blogs/aimee/"&gt;aimee&lt;/a&gt; has a great description of how aimee, &lt;a href="http://blog.nexwerk.com/"&gt;Enrique&lt;/a&gt; and I ended up &lt;a href="http://edendevelopment.co.uk/blogs/aimee/2010/01/06/remote-trio-programming/"&gt;trio-programming&lt;/a&gt; over the last couple of days, and here&amp;rsquo;s a photo to prove it. I&amp;rsquo;m the remote on the macbook to aimee&amp;rsquo;s left.&lt;/p&gt;

&lt;p&gt;&lt;img title="Trio-programming with aimee and Enrique" alt="trio-programming" src="http://farm5.static.flickr.com/4055/4257007886_3442ceceba_d.jpg" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Model for Life</title>
    <link rel="alternate" href="http://tooky.co.uk/model_for_life/"/>
    <id>http://tooky.co.uk/model_for_life/</id>
    <published>2009-12-17T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Its nearly two weeks since &lt;a href="http://twitter.com/edentodd"&gt;Todd&lt;/a&gt; gave me my first apprenticeship task:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Assignment: To logically model an individual&amp;rsquo;s life from the perspective of a parent instructing their
child guidelines on how to make decisions to maximize happiness.&lt;/p&gt;

&lt;p&gt;Requirements: Your model of a &amp;ldquo;Life&amp;rdquo; can be as extensive or granular as you wish to take it.  There is
generally no wrong answer, other that it must reflect reality.  You will be expected to defend your
model and the business rules you create.&lt;/p&gt;

&lt;p&gt;Your model must take into to account (at minimum):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desires&lt;/li&gt;
&lt;li&gt;Needs&lt;/li&gt;
&lt;li&gt;Relationships&lt;/li&gt;
&lt;li&gt;Finances&lt;/li&gt;
&lt;li&gt;A State of well-being (happiness)&lt;/li&gt;
&lt;li&gt;An unforeseen disaster&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;My son will be 2 on Monday. Its been amazing to watch him grow up and see him develop into a real character. When I think back to those first few weeks, I can say exactly what he needed and what made him happy then.&lt;/p&gt;

&lt;p&gt;So long as he was warm, dry and fed and he had his mum he was happy - he was also mostly asleep.&lt;/p&gt;

&lt;p&gt;Now its a different story. He still needs to be warm, dry and fed, but its no longer enough. He has to be entertained or challenged. He needs to see all the significant people in his life (coming home from work to excited shrieks of &amp;ldquo;Daddy, daddy&amp;rdquo; never gets old). He loves to visit his favourite places, play with favourite toys and watch his favourite DVDs. His life has become much more complex, and what makes him happy has followed suit.&lt;/p&gt;

&lt;p&gt;This is how I&amp;rsquo;m going to approach this problem. I&amp;rsquo;m going to try to model a life from the point of view of a baby initially and see how it will evolves with time. I&amp;rsquo;ll continue to record my progress here.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Language of Software Craftsmanship</title>
    <link rel="alternate" href="http://tooky.co.uk/language-of-software-craftsmanship/"/>
    <id>http://tooky.co.uk/language-of-software-craftsmanship/</id>
    <published>2009-12-11T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;The &lt;a href="http://groups.google.com/group/software_craftsmanship/browse_thread/thread/417bec17184ccfc2#"&gt;software craftsmanship list&lt;/a&gt; had a little flurry of activity today. &lt;a href="http://twitter.com/jasongorman"&gt;Jason Gorman&lt;/a&gt; posted about &lt;a href="http://www.teamsandtechnology.com/dh/blog/"&gt;David Harvey&amp;rsquo;s&lt;/a&gt; &lt;a href="http://qconlondon.com/london-2010/presentation/Danger:+Software+Craftsmen+at+Work"&gt;session&lt;/a&gt; at next years &lt;a href="http://qconlondon.com/london-2010/"&gt;QCon London&lt;/a&gt;. The talk - &lt;a href="http://qconlondon.com/london-2010/presentation/Danger:+Software+Craftsmen+at+Work"&gt;Danger: Software Craftsmen at Work&lt;/a&gt; - unsurprisingly caused some discussion on the list!&lt;/p&gt;

&lt;p&gt;Linked in the thread is an &lt;a href="http://www.teamsandtechnology.com/dh/blog/2009/05/25/software-craftsmanship-can-we-just-get-over-it/"&gt;interesting article&lt;/a&gt; by David that gives a little bit more context to his position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have a problem with the language of software craftsmanship. The notion that somehow we’ll solve
our nascent profession’s problems by calling ourselves, or regarding ourselves, as “apprentices”,
“journeymen”, “masters” and so on is more than faintly absurd.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have &lt;a href="http://tooky.github.com/craftsmanship/eden/2009/11/25/software-craftsmanship.html"&gt;recently joined&lt;/a&gt; the formal apprenticeship scheme at &lt;a href="http://www.edendevelopment.co.uk"&gt;Eden Development&lt;/a&gt;, and I wanted to give some perspective of what being an apprentice means to me.&lt;/p&gt;

&lt;p&gt;Using terms like &amp;ldquo;apprentice&amp;rdquo;, &amp;ldquo;journeymen&amp;rdquo; and &amp;ldquo;master&amp;rdquo; &lt;strong&gt;is&lt;/strong&gt; probably a bit absurd. But its absurd in a good way. &lt;a href="http://c2.com/cgi/wiki?SystemMetaphor"&gt;Metaphor&lt;/a&gt; is one of the core practices of XP, developing a system metaphor gives a team a shared vision for project. Its not meant to define what the software does, but the language of the metaphor gives the team a way to discuss the system.&lt;/p&gt;

&lt;p&gt;The software craftsmanship metaphor gives us shared vision for improving the state of software development. Its not supposed to be new ideas, its just a new way of framing new ideas to give people a common language to use. Calling myself an apprentice allows me to say that I have a lot to learn, that I want to be part of company that is willing to invest in me, if I&amp;rsquo;m willing to invest in myself.&lt;/p&gt;

&lt;p&gt;If I sound absurd when I tell people that, then so be it. It certainly starts the conversation.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Software Craftsmanship and Eden Development</title>
    <link rel="alternate" href="http://tooky.co.uk/software-craftsmanship/"/>
    <id>http://tooky.co.uk/software-craftsmanship/</id>
    <published>2009-11-25T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;m not sure when I first came across &lt;a href="http://en.wikipedia.org/wiki/Software_Craftsmanship"&gt;software craftsmanship&lt;/a&gt;, but I know that &lt;a href="http://twitter.com/edentodd"&gt;Dave Hoover&lt;/a&gt;&amp;rsquo;s early blogs about &lt;a href="http://oreilly.com/catalog/9780596518387"&gt;apprenticeship patterns&lt;/a&gt; were some of the posts that made it really start to resonate with me!&lt;/p&gt;

&lt;p&gt;In 2005 I read one of Dave&amp;rsquo;s posts - &lt;a href="http://redsquirrel.com/cgi-bin/dave/2005/04/12#a.thread.of.patterns"&gt;A Thread of Patterns&lt;/a&gt; - and I started to recognise some of these patterns in my own experience. This post prompted me to email Dave and tell him a little of my story.&lt;/p&gt;

&lt;p&gt;Reading back over those emails today its striking that I had started to look for a mentor. That I felt that there were serious problems with the way the company I worked for approached software, but I didn&amp;rsquo;t feel I had the experience to fix those problems, and that I needed to move and take the next step in my career.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think one area that your patterns need to touch upon is getting the culture
right. This is an area that I think is making my life more difficult. There
isn&amp;rsquo;t a culture of developing software in this company. Most of the
programming here is about quick and dirty solutions to solve one time problems
for production.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was 2005 - it was two more years before I left that company, and the move I made then didn&amp;rsquo;t work out the way I hoped. I learnt alot along the way, but have never really found the culture I was looking for.&lt;/p&gt;

&lt;p&gt;Fast-forward to today - after 5 months at &lt;a href="http://edendevelopment.co.uk/"&gt;Eden Development&lt;/a&gt; I feel that I have finally found a company with a culture that I share. The company itself has been on a bit of a &lt;a href="http://blog.edendevelopment.co.uk/2009/10/13/software-craftsmanship-a-meeting-of-minds/"&gt;voyage of discovery&lt;/a&gt; and growth and I am really excited to be part of its future. Not only did we leave our old office for the first time today, but the company started its new
formal apprenticeship scheme.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m pleased to say that I was offered, and have accepted, an Eden Development apprenticeship under the guidance of &lt;a href="http://twitter.com/edentodd"&gt;Todd Anderson&lt;/a&gt;. I&amp;rsquo;m excited to see how this program develops, and look forward to sharing my experiences.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>UK Apprenticeships and Software Development</title>
    <link rel="alternate" href="http://tooky.co.uk/uk-apprenticeships-and-software-development/"/>
    <id>http://tooky.co.uk/uk-apprenticeships-and-software-development/</id>
    <published>2009-09-02T01:00:00+01:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://twitter.com/coreyhaines"&gt;Corey Haines&lt;/a&gt; recently blogged about &lt;a href="http://programmingtour.blogspot.com/2009/09/software-development-school-idea.html"&gt;building a software development school&lt;/a&gt; and it got me thinking about UK &lt;a href="http://www.apprenticeships.org.uk/Employers/Whats-it-all-about/What-is-an-Apprenticeship.aspx"&gt;Apprenticeships&lt;/a&gt; and how we could improve the &amp;ldquo;craft&amp;rdquo; here in the UK.&lt;/p&gt;

&lt;p&gt;UK Apprenticeships (a rebranding of &amp;ldquo;Modern Apprenticeships&amp;rdquo; - also known as &amp;ldquo;Day Release&amp;rdquo;) is essentially a scheme that combines on and off the job training. They cover a large array of careers but all have the same common principle: apprentices spend most of their time (typically 4-days per week) working in a real business under a mentor, and the remaining time at college studying for a recognised qualification.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="http://www.apprenticeships.org.uk/Employers/Whats-it-all-about/What-is-an-Apprenticeship.aspx"&gt;Apprenticeships website&lt;/a&gt;) an Apprenticeship is not a qualification itself but a framework  containing separately certificated elements.&lt;/p&gt;

&lt;p&gt;The Apprenticeship frameworks cover a wide range of &lt;a href="http://www.apprenticeships.org.uk/Types-of-Apprenticeships.aspx"&gt;industries&lt;/a&gt; including an &lt;a href="http://www.apprenticeships.org.uk/Types-of-Apprenticeships/Information-and-Communication-Technology/ICT-Professional.aspx"&gt;ICT Professional apprenticeship&lt;/a&gt; - I wonder what it would take to develop a scheme for software developers which would enable UK development workshops to start taking an active role in developing the next generation of software craftsmen?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How I'm going to try to become a better pair.</title>
    <link rel="alternate" href="http://tooky.co.uk/how-to-improve-my-pairing/"/>
    <id>http://tooky.co.uk/how-to-improve-my-pairing/</id>
    <published>2009-09-02T01:00:00+01:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I started my new job with &lt;a href="http://www.edendevelopment.co.uk"&gt;Eden Development&lt;/a&gt; about 2 months ago now. So far its been going great, I&amp;rsquo;ve been working on an interesting project (which I hope to speak more about soon) with a great team.&lt;/p&gt;

&lt;p&gt;One of our core practices at Eden is &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt;, which is something I&amp;rsquo;ve only had limited experience of in the past, but after 2 months of doing it every day with a variety of people, I&amp;rsquo;m convinced of its &lt;a href="http://en.wikipedia.org/wiki/Pair_programming#Benefits"&gt;merits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pairing is hard though. Doing it well is a skill, and because its now something I do every day I want to get better at it. &lt;a href="http://www.markhneedham.com"&gt;Mark Needham&lt;/a&gt; posted an interesting article on &lt;a href="http://www.markhneedham.com/blog/2009/08/27/pair-programming-observations-on-anti-patterns/"&gt;pair programming anti-patterns&lt;/a&gt; which I really identified with.&lt;/p&gt;

&lt;p&gt;I can definitely recognise the anti-pattern behaviour he describes in my own pairing, and I&amp;rsquo;ve been frustrated by the same behaviour by my pair!&lt;/p&gt;

&lt;p&gt;What I take away from Mark&amp;rsquo;s post is that effective pairing is really about good communication! You have to let your pair know what your doing and you have to listen to what their saying. &lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m driving I&amp;rsquo;m going to try to slow down a little - rather than just diving headlong into solving the problem, and racing around the code I am going to try to spend more time explaining what I&amp;rsquo;m doing and why I&amp;rsquo;m doing it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m pretty sure that taking the time to explain my thinking will not only help my pair stay involved but will give us both chance to think about it, and pick up on any potential problems or wrong assumptions.&lt;/p&gt;

&lt;p&gt;Hopefully talking more will make it easier for my pair to offer an alternative strategy. If we&amp;rsquo;ve slowed down, and we&amp;rsquo;re talking more about the solution its less work to stop and change direction to try an alternative - it feels less like an interruption perhaps.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simple Old-school webcam using iSightcapture and dropbox</title>
    <link rel="alternate" href="http://tooky.co.uk/webcam-with-isightcapture-and-dropbox/"/>
    <id>http://tooky.co.uk/webcam-with-isightcapture-and-dropbox/</id>
    <published>2009-02-20T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been having a bit of trouble with my shoulder and back for the last couple of weeks - mostly rugby related I think - and I&amp;rsquo;ve been seeing my osteopath to get it sorted. He suggested that I might be making things worse by the way I&amp;rsquo;m sitting at my desk. He&amp;rsquo;s probably right, I think I&amp;rsquo;m a chronic sloucher. His idea was to get someone at the office to keep an eye on me, or take photos of me every now and again&amp;hellip;&lt;/p&gt;

&lt;p&gt;Well I didn&amp;rsquo;t think that sounded too great, so I decided I could just use my macbook pro&amp;rsquo;s built in iSight to do the job - throw in &lt;a href="http://www.intergalactic.de/pages/iSight.html"&gt;isightcapture&lt;/a&gt; with a cron job and I have an image of how i&amp;rsquo;m sitting every 20 mins.&lt;/p&gt;

&lt;p&gt;After doing that I couldn&amp;rsquo;t resist putting up a page with of &lt;a href="/me.html"&gt;me&lt;/a&gt; with the updated image, in the old-school webcam style. I&amp;rsquo;m just using dropbox to sync the image to my public folder as it seemed the simplest thing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Getting started with Cucumber and Sinatra</title>
    <link rel="alternate" href="http://tooky.co.uk/getting-started-with-cucumber-and-sinatra/"/>
    <id>http://tooky.co.uk/getting-started-with-cucumber-and-sinatra/</id>
    <published>2009-02-05T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; Sinatra and cucumber integration has changed now, Rob Holland updated the &lt;a href="https://github.com/cucumber/cucumber/wiki/sinatra"&gt;wiki&lt;/a&gt; to reflect it. There is also a more full featured example on his &lt;a href="http://github.com/robholland/cucumber/commit/0e12d8100ca8541af014abe6a480c53a90b6aebd"&gt;branch&lt;/a&gt; of cucumber. I&amp;rsquo;ve updated the blog to reflect that.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://sinatra.github.com"&gt;Sinatra&lt;/a&gt; is probably the most popular ruby micro web framework at the moment. Its simple dsl for quickly creating web apps, it give you &amp;ldquo;just enough&amp;rdquo; framework to get things done.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://cukes.info"&gt;Cucumber&lt;/a&gt; is that latest development from the &lt;a href="http://dannorth.net/introducing-bdd"&gt;BDD&lt;/a&gt; / &lt;a href="http://rspec.info"&gt;RSpec&lt;/a&gt; guys. &lt;a href="http://cukes.info"&gt;Cucumber&lt;/a&gt; lets you describe the behaviour of your software in plain text. These files then serve as automated tests and documentation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been considering using both of these tools for an upcoming project so I wanted to make sure they worked happily together. A quick google seemed to suggest that some work had been done, but I could find a tutorial for getting up and running. Happily the latest releases of Cucumber (and &lt;a href="http://github.com/brynary/webrat/tree/master"&gt;Webrat&lt;/a&gt;) have Sinatra support built in so its really very easy!&lt;/p&gt;

&lt;p&gt;With cucumber you write your plain text specifications in terms of &amp;lsquo;features&amp;rsquo;, by convention they are in a features directory with the .feature extension. So for our purposes we will start with a very simple feature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Feature: view pages

  Scenario: Home page
    Given I am viewing "/"
    Then I should see "Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run our feature (and test our code against it) is as simple as &lt;code&gt;cucumber feature/home.feature&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="cucumber pending steps" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Cucumber parses the feature and looks for matching step definitions. As we can see in the screenshot we need to implement the steps in our feature so cucumber knows how to run it. Step definitions are implemented in ruby.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Given /^I am viewing "(.+)"$/ do |url|
  visit(url)
end

Then /^I should see "(.+)"$/ do |text|
  response_body.should =~ Regexp.new(Regexp.escape(text))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two simple steps make use of webrat to request the url from our app and check that the response contains the text we&amp;rsquo;re looking for.&lt;/p&gt;

&lt;p&gt;&lt;img alt="cucumber failing without webrat" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber2.png" /&gt;&lt;/p&gt;

&lt;p&gt;The feature is currently failing as a method we have used in our step definition doesn&amp;rsquo;t exist. &lt;code&gt;visit&lt;/code&gt; is a method from webrat so we need to configure cucumber&amp;rsquo;s environment to use webrat. Webrat has a &lt;code&gt;SinatraSession&lt;/code&gt; specifically for testing sinatra web apps. We will also need to require the RSpec expectations as we are using them to check the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'spec/expectations'
require 'webrat'
Webrat.configure do |config|
  config.mode = :sinatra
end

World do
  Webrat::SinatraSession.new
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the scenario again, and we see that everything is hooked up properly and the scenario is failing (as expected because we haven&amp;rsquo;t written any code).&lt;/p&gt;

&lt;p&gt;&lt;img alt="cucumber failing no code" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now we have our failing scenario we can start putting together our web app and make sure we&amp;rsquo;re running with a green light!&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'sinatra'

get '/' do
  "Hello, world!"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we run out scenario again unfortunately it still fails, we need to hook cucumber up to our app.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'spec/expectations'
require 'webrat'
Webrat.configure do |config|
  config.mode = :sinatra
end

World do
  Webrat::SinatraSession.new
end

require File.dirname(__FILE__) + '/../../hello''
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally running cucumber gives us that nice green feeling.&lt;/p&gt;

&lt;p&gt;&lt;img alt="green cucumber" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber4.png" /&gt;&lt;/p&gt;

&lt;p&gt;The only thing left to do is to add a rake file to run our features for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'rubygems'
require 'cucumber/rake/task'

Cucumber::Rake::Task.new(:features) do |t|
  t.cucumber_opts = "--format pretty"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="rake features" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber5.png" /&gt;&lt;/p&gt;

&lt;p&gt;All of the code for this getting started guide is available from &lt;a href="http://gist.github.com/58647"&gt;gist&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHub Pages and Jekyll</title>
    <link rel="alternate" href="http://tooky.co.uk/github-pages-and-jekyll/"/>
    <id>http://tooky.co.uk/github-pages-and-jekyll/</id>
    <published>2008-12-18T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://github.com"&gt;GitHub&amp;rsquo;s&lt;/a&gt; new GitHub pages service makes it incredibly easy to host a static site, which is completely version controlled, when you add &lt;a href="http://mojombo.github.com"&gt;Tom Preston-Werner&amp;rsquo;s&lt;/a&gt; &lt;a href="http://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; into the mix you get a fantastically simple blogging platform.&lt;/p&gt;

&lt;p&gt;To set up your github pages site all you need to do is create a [username].github.com repository and push your site to the repository. Really simple. Checkout &lt;a href="http://you.github.com"&gt;you.github.com&lt;/a&gt; for more detailed instructions!&lt;/p&gt;

&lt;p&gt;The great thing about this is that &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; run your repository through &lt;a href="http://github.com/mojombo/jekyll/tree/master"&gt;Jekyll&lt;/a&gt;. This means that you can create a really simple blogging platform with all your posts stored and version controlled in git! See &lt;a href="http://mojombo.github.com/2008/11/17/blogging-like-a-hacker.html"&gt;Blogging Like a Hacker&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Tom has also published his &lt;a href="http://github.com/mojombo/tpw/tree/master"&gt;repository&lt;/a&gt; to help you get started as well.&lt;/p&gt;

&lt;p&gt;Many thanks to Tom for all of this, I&amp;rsquo;ve managed to put together a nice simple clean site based on his ideas, which I&amp;rsquo;m really pleased with!&lt;/p&gt;
</content>
  </entry>
</feed>
