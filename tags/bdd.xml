<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steve Tooke - bdd</title>
  <id>http://tooky.co.uk/</id>
  <link href="http://tooky.co.uk/tags/bdd/"/>
  <link href="http://tooky.co.uk/tags/bdd.xml" rel="self"/>
  <updated>2014-07-31T01:00:00+01:00</updated>
  <entry>
    <title>Kickstart Academy Podcast with Liz Keogh and Corey Haines</title>
    <link rel="alternate" href="http://tooky.co.uk/kickstart-academy-podcast-with-liz-keogh-and-corey-haines/"/>
    <id>http://tooky.co.uk/kickstart-academy-podcast-with-liz-keogh-and-corey-haines/</id>
    <published>2014-07-31T01:00:00+01:00</published>
    <updated>2014-07-31T13:00:30+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;For the third installment of the Kickstart Academy podcast we were pleased to
have &lt;a href="https://twitter.com/lunivore"&gt;Liz Keogh&lt;/a&gt; join us &amp;mdash; and &lt;a href="https://twitter.com/coreyhaines"&gt;Corey Haines&lt;/a&gt; returned to the
panel for his second appearance.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We enjoyed having &lt;a href="https://twitter.com/sandimetz"&gt;Sandi Metz&lt;/a&gt; on the panel for the &lt;a href="http://kickstartacademy.io/blog/2014-07-29-kickstart-academy-podcast-with-corey-haines-and-sandi-metz"&gt;last
podcast&lt;/a&gt; so much that we hope to have a running theme of inviting
the previous guest back to the following show – in a similar vein to BBC Radio
4&amp;rsquo;s &lt;a href="http://en.wikipedia.org/wiki/Chain_Reaction_%28radio%29"&gt;Chain Reaction&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/_hKO-AVjCJM"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;There is an &lt;a href="https://dl.dropboxusercontent.com/u/41915/kickstart-academy-podcast/003-liz-keogh-and-corey-haines.mp3"&gt;audio version of this podcast available here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Show Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[0:01:39] Liz&amp;rsquo;s backstory&lt;/li&gt;
&lt;li&gt;[0:04:17] Define &lt;a href="http://en.wikipedia.org/wiki/Cynefin"&gt;Cynefin&lt;/a&gt; - a sense making framework

&lt;ul&gt;
&lt;li&gt;Simple/Obvious - children can solve it&lt;/li&gt;
&lt;li&gt;Requires expertise - watchmaker&lt;/li&gt;
&lt;li&gt;Complex - not predictable outcomes&lt;/li&gt;
&lt;li&gt;Chaos - accident and emergency&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:08:30] Software development approaches within the different cynefin domains

&lt;ul&gt;
&lt;li&gt;Commoditised requirements vs Differentiating Requirements&lt;/li&gt;
&lt;li&gt;Chaos - Experiment / Spike / Probe&lt;/li&gt;
&lt;li&gt;Requires expertise - Analyze (e.g. BDD)&lt;/li&gt;
&lt;li&gt;Simple - off the shelf&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:12:25] Capabilities vs Goals

&lt;ul&gt;
&lt;li&gt;Understanding the goal behind the capability&lt;/li&gt;
&lt;li&gt;Which stakeholders are getting the benefit?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/imtomgilb"&gt;Tom Gilb&lt;/a&gt; - &lt;a href="http://gilb.com/Project-Management"&gt;Evolutionary Project Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:16:31] Is BDD a design activity not required for obvious requirements? - &lt;a href="https://twitter.com/mattwynne"&gt;Matt Wynne&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Analyze as simply as possible&lt;/li&gt;
&lt;li&gt;Name the scenarios&lt;/li&gt;
&lt;li&gt;Ask: is there anything different?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:20:40] BDD: automation and regression testing

&lt;ul&gt;
&lt;li&gt;How you set the context with &amp;ldquo;Given&amp;rdquo; doesn&amp;rsquo;t matter&lt;/li&gt;
&lt;li&gt;&amp;ldquo;When&amp;rdquo; is the actual behaviour your interested in&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:22:11] Liz&amp;rsquo;s scale for classifying capabilities

&lt;ul&gt;
&lt;li&gt;5 - nobody in the world has ever done it before&lt;/li&gt;
&lt;li&gt;4 - somebody has done it before but not in this organisation&lt;/li&gt;
&lt;li&gt;3 - somebody in this organisation has done it before, and we need their expertise&lt;/li&gt;
&lt;li&gt;2 - somebody in the team has done it before&lt;/li&gt;
&lt;li&gt;1 - we all know how to do it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:23:05] When automated scenarios catch a regression bug it&amp;rsquo;s usually because of poor design

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t just throw more scenarios at it find out why your getting the bugs&lt;/li&gt;
&lt;li&gt;Often because two capabilities are bleeding in to each other&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:25:51] Techniques for talking through capabilities with stakeholders

&lt;ul&gt;
&lt;li&gt;Why are we doing this project?&lt;/li&gt;
&lt;li&gt;Who are we doing it for?&lt;/li&gt;
&lt;li&gt;Can you give me an example?&lt;/li&gt;
&lt;li&gt;What will you be able to do that you can&amp;rsquo;t do now?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:30:44] Focusing on the outcome

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/PapaChrisMatts"&gt;Chris Matts&lt;/a&gt; - &lt;a href="http://theitriskmanager.wordpress.com/2014/07/06/a-tale-of-two-feature-injections-a-cynefin-tale/"&gt;Value Mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Assign numbers from Liz&amp;rsquo;s scale to capabilities&lt;/li&gt;
&lt;li&gt;For 1s and 2s, &amp;ldquo;Choose the technology that&amp;rsquo;s easy to change&amp;rdquo; - Chris Matts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:37:01] Applying BDD at the different levels

&lt;ul&gt;
&lt;li&gt;When outcomes are uncertain, can lead to analysis paralysis&lt;/li&gt;
&lt;li&gt;Often an indicator of 4s and 5s&lt;/li&gt;
&lt;li&gt;So find a way to prototype/experiment&lt;/li&gt;
&lt;li&gt;Listen for the uncertainty&lt;/li&gt;
&lt;li&gt;Listen for the boredom&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:42:05] What is BDD?

&lt;ul&gt;
&lt;li&gt;Not testing tools with BDD mode - &amp;ldquo;should&amp;rdquo; or &amp;ldquo;expect&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Using examples to illustrate behaviour&amp;rdquo; - Liz&lt;/li&gt;
&lt;li&gt;Let dev&amp;rsquo;s write the scenarios, and get feedback from the testers and experts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tastapod"&gt;Dan North&lt;/a&gt;&amp;rsquo;s &lt;a href="http://en.wikipedia.org/wiki/Behavior-driven_development#History"&gt;definition&lt;/a&gt; true in 2009, maybe not 2010&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not necessarily high-automation&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still outside-in&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still 2nd generation&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still pull-based&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still multiple-scale&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still agile&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still about getting feedback&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s still a cycle of interactions&lt;/li&gt;
&lt;li&gt;We now respect we can&amp;rsquo;t always get well defined outputs&lt;/li&gt;
&lt;li&gt;It still results in software that matters&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:49:01] Patterns for improving scenarios

&lt;ul&gt;
&lt;li&gt;Just write down what people say&lt;/li&gt;
&lt;li&gt;Have the conversation&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t try to make patterns fit existing steps&lt;/li&gt;
&lt;li&gt;Step away from the tools&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:53:14] How does having theses conversations about the system itself affect the minute-by-minute development process?

&lt;ul&gt;
&lt;li&gt;Leads to more spikes and prototypes, and understanding why to do them?&lt;/li&gt;
&lt;li&gt;Less useful for large organisations where a lot of the work is governed by regulations&lt;/li&gt;
&lt;li&gt;Removes frustrations of things like 4-hour planning meetings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[0:55:25] Can you use examples to identify and then test your assumptions?&lt;/li&gt;
&lt;li&gt;[0:57:45] Leveling capabilities

&lt;ul&gt;
&lt;li&gt;Map out the capabilities&lt;/li&gt;
&lt;li&gt;Map the stakeholders - then understand the capailities they are looking for&lt;/li&gt;
&lt;li&gt;Try estimating them using relative sizes&lt;/li&gt;
&lt;li&gt;Find the capabilities that are new&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[1:00:33] Liz&amp;rsquo;s Fantasy Fiction

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/silversongchild"&gt;The Silversong Child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanpub.com/nightingalethrone"&gt;The Nightingale Throne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High-level fantasy - a bit like Game of Thrones, with less killings and more magic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[1:01:40] How do you guard against new adopters of BDD from just rewriting existing requirements with new words, e.g. should, then, describe, expect - &lt;a href="https://twitter.com/kerryb"&gt;Kerry Buckley&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimeo.com/75923366"&gt;What is the value of Social Capital? - Jabe Bloom&lt;/a&gt; - &lt;a href="https://twitter.com/cyetain"&gt;Jabe Bloom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Hangout with Matt Wynne and Aslak Hellesøy</title>
    <link rel="alternate" href="http://tooky.co.uk/hangout-with-matt-wynne-and-aslak-hellesoy/"/>
    <id>http://tooky.co.uk/hangout-with-matt-wynne-and-aslak-hellesoy/</id>
    <published>2014-05-16T16:11:00+01:00</published>
    <updated>2014-06-10T07:00:47+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago Matt, Aslak and I held a live google hangout. Today I realised
that I hadn&amp;rsquo;t mentioned it here. If you haven&amp;rsquo;t seen it yet you can watch it
here:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/P6znT1H04PE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;d love to hear what you thought about it, and what we can do better next time
&amp;mdash; especially as next time is this Monday, and we&amp;rsquo;ll be joined by &lt;a href="http://www.sandimetz.com"&gt;Sandi
Metz&lt;/a&gt; to talk about object-oriented design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://plus.google.com/b/112947453773806733442/events/ck08u3ha70spbk5p467j2ip5sgs"&gt;Kickstart Academy Hangout with Sandi Metz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the hangout format means that we can include screensharing, code and most
importantly your contributions! Please let us know what you&amp;rsquo;d like to hear us
discuss.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Cucumber Test Trap</title>
    <link rel="alternate" href="http://tooky.co.uk/the-cucumber-test-trap/"/>
    <id>http://tooky.co.uk/the-cucumber-test-trap/</id>
    <published>2014-03-29T00:00:00+00:00</published>
    <updated>2014-04-03T11:55:02+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/aslak_hellesoy"&gt;Aslak Hellesøy&lt;/a&gt; recently wrote how cucumber is &amp;ldquo;&lt;a href="https://cucumber.pro/blog/2014/03/03/the-worlds-most-misunderstood-collaboration-tool.html"&gt;the world&amp;rsquo;s most
misunderstood collaboration tool&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cucumber was born out of the frustration with ambiguous requirements and
misunderstandings between the people who order the software and those who
deliver it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anybody who has spent time with more than a few codebases that use cucumber will
probably recognise Aslak&amp;rsquo;s description of a cucumber anti-pattern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When Cucumber is adopted solely as a tool to write automated tests without
any input from business analysts they tend to become imperative and lose
their documentation value.&lt;/p&gt;

&lt;p&gt;This also makes them slow and brittle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This doesn&amp;rsquo;t tell the whole story though - there are many teams that work with
the business to define their scenarios, that make an effort to write declarative
scenarios - yet some of these teams still suffer from slow and brittle builds.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;ve fallen into the cucumber test trap - they want to document everything
the system does and automatically check it using cucumber.&lt;/p&gt;

&lt;p&gt;As they start building their system the automated cucumber suite gives them
the confidence that everything is working. Running the features is quick and
their system is simple. As they add behaviour to the system they diligently
document the behaviour in gherkin and automate it with cucumber. All of the
while running every scenario from end-to-end through their entire stack.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://pragprog.com/book/hwcuc/the-cucumber-book"&gt;The Cucumber Book&lt;/a&gt; (&lt;em&gt;When Cucumbers Go Bad&lt;/em&gt; p. 103), &lt;a href="https://twitter.com/mattwynne"&gt;Matt
Wynne&lt;/a&gt; and Aslak describe one of the main causes for &amp;ldquo;&lt;em&gt;Slow Features&lt;/em&gt;&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lots of Scenarios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might seem like stating the obvious, but having a lot of scenarios is by
far the easiest way to give yourself a slow overall feature run. We&amp;rsquo;re not
trying to suggest you give up on BDD and go back to cowboy coding, but we do
suggest you treat a slow feature run as a red flag. Having lots of tests has
other disadvantages than just waiting a long time for feedback. It&amp;rsquo;s hard
to keep a large set of features organized, making them awkward for readers
to navigate around. Maintenance is also harder on the underlying step
definitions and support code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course this isn&amp;rsquo;t really a product of using cucumber, or even trying to get
started with BDD or Specification by Example. It&amp;rsquo;s exactly the same problem that
&lt;a href="https://twitter.com/jbrains/"&gt;J. B. Rainsberger&lt;/a&gt; describes when he says that &amp;ldquo;&lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;integrated tests
are a scam&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You write integrated tests because you can&amp;rsquo;t write perfect unit tests. You
know this problem: all your unit tests pass, but someone finds a defect
anyway.  Sometimes you can explain this by finding an obvious unit test you
simply missed, but sometimes you can&amp;rsquo;t. In those cases, you decide you need
to write an integrated test to make sure that all the production
implementations you use in the broken code path now work correctly together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As soon as you make a decision that you will describe everything your system
does using cucumber features you&amp;rsquo;ve left BDD behind, fallen into the cucumber
test trap and are destined to have &amp;ldquo;&lt;em&gt;Lots of Scenarios&lt;/em&gt;&amp;rdquo;. J. B.
&lt;a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/"&gt;describes&lt;/a&gt; this brilliantly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have a medium-sized web application with around 20 pages, maybe 10 of
which have forms. Each form has an average of 5 fields and the average field
needs 3 tests to verify thoroughly. Your architecture has about 10 layers,
including web presentation widgets, web presentation pages, abstract
presentation, an HTTP bridge to your service API, controllers, transaction
scripts, abstract data repositories, data repository implementations, SQL
statement mapping, SQL execution, and application configuration. A typical
request/response cycle creates a stack trace 30 frames deep, some of which
you wrote, and some of which you&amp;rsquo;ve taken off the shelf from a wide variety
of open source and commercial packages. How many tests do you need to test
this application thoroughly?&lt;/p&gt;

&lt;p&gt;At least 10,000. Maybe a million. One million.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;One million&lt;/em&gt; scenarios - even &lt;em&gt;10,000&lt;/em&gt; scenarios - to thoroughly check &amp;ldquo;a
medium sized web application&amp;rdquo; using cucumber. All of them running end-to-end. No
wonder teams have &amp;ldquo;&lt;em&gt;Slow Features&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Avoiding the cucumber test trap is hard. It&amp;rsquo;s easy to keep adding scenarios
which give you a false confidence that your application is working correctly.
It&amp;rsquo;s easy to just add some more code to make those scenarios pass.&lt;/p&gt;

&lt;p&gt;Instead we need to keep &lt;a href="http://lizkeogh.com/2011/09/22/conversational-patterns-in-bdd/"&gt;focusing on the conversations&lt;/a&gt;. Find the
scenarios that matter, that are important to document, that are worth automating
and push everything else down into lower level, isolated tests.&lt;/p&gt;

&lt;p&gt;Define contracts between layers, and test those exhaustively. Allow the design
pressure of creating testable code help you to build a cleaner, maintainable
application. This will help you prevent another one of the main causes of &amp;ldquo;&lt;em&gt;Slow
Features&lt;/em&gt;&amp;rdquo; that Matt and Aslak describe in The Cucumber Book.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Big Ball of Mud&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Big Ball of Mud is an ironic name given to the type of software design
you see when nobody has really made much effort to actually do any software
design. In other words, it&amp;rsquo;s a big, tangled mess.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the &lt;a href="http://www.meetup.com/Extreme-Programmers-London/"&gt;Extreme Programmers London&lt;/a&gt; meetup last week &lt;a href="https://twitter.com/keithb_b"&gt;Keith
Braithwaite&lt;/a&gt; talked about code metrics and the effect that
unit-testing has on the distribution of complexity in the codebase. During the
talk he mentioned that he thought the part of the TDD cycle that has the biggest
effect on the software design is when you have to add the next test, because we
often have to refactor our code to support adding the next test - to make it
testable.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://www.growing-object-oriented-software.com"&gt;Growing Object Oriented Software, Guided by Tests&lt;/a&gt; (&lt;em&gt;What Is the Point
of Test-Driven Development&lt;/em&gt;), &lt;a href="https://twitter.com/sf105"&gt;Steve Freeman&lt;/a&gt; and &lt;a href="https://twitter.com/natpryce"&gt;Nat Pryce&lt;/a&gt;
describe why testable code &lt;em&gt;is&lt;/em&gt; well designed code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thorough unit testing helps us to improve the internal quality because, to
be tested, a unit has to be structured to run outside the system in a test
fixture. A unit test for an object needs to create the object, provide its
dependencies, interact with it, and check that it behaved as expected. So,
for a class to be easy to unit-test, the class must have explicit
dependencies that can easily be substituted and clear responsibilities that
can easily be invoked and verified. In software engineering terms, that
means that the code must be &lt;em&gt;loosely coupled&lt;/em&gt; and &lt;em&gt;highly cohesive&lt;/em&gt; - in
other words, well designed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By falling into the cucumber test trap and relying on checking the system
end-to-end you lose this valuable design pressure that comes from TDD. You have
no need to make your units testable in isolation, because it&amp;rsquo;s &lt;em&gt;easy&lt;/em&gt; to add
another test that runs from outside of the application. Which means you have
nothing pushing you to improve the internal quality of the codebase, nothing to
help you avoid creating a &lt;em&gt;Big Ball of Mud&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Writing scenarios &lt;em&gt;with your customers&lt;/em&gt; will help you to understand what your
application needs to do, and automating those scenarios with cucumber will help
you to know when the application meets those needs. Just don&amp;rsquo;t fall into the
trap of thinking you can use cucumber to test the app completely at the expense
of unit tests or &lt;em&gt;Lots of Scenarios&lt;/em&gt; and a &lt;em&gt;Big Ball of Mud&lt;/em&gt; will be your
reward.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Discovering BDD</title>
    <link rel="alternate" href="http://tooky.co.uk/discovering-bdd/"/>
    <id>http://tooky.co.uk/discovering-bdd/</id>
    <published>2013-12-11T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I graduated from UMIST in 2002 with a Software Engineering degree, and I started work with a company who provided document scanning services, mostly to the public sector - NHS trusts and local authorities. I came into the company thinking I knew it all - I had a software engineering degreee!&lt;/p&gt;

&lt;p&gt;Wow - I had a &lt;em&gt;LOT&lt;/em&gt; to learn!&lt;/p&gt;

&lt;p&gt;I met Shane Paterson while I was there. Shane was another developer at the company, and even though he was based in New Zealand, he was responsible for pointing me in the direction of XP and TDD. There&amp;rsquo;s some more about this story in the &lt;a href="http://chimera.labs.oreilly.com/books/1234000001813/ch04.html#solution_id19"&gt;Apprenticeship Patterns&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;I started reading a lot of blogs and participating in the various mailing lists. I found an &lt;a href="http://groups.yahoo.com/neo/groups/extremeprogramming/conversations/messages/116122"&gt;old post&lt;/a&gt; on the XP mailing list where I was introducing a colleague to TDD using the bowling game kata which made me smile as I used the same exercise during some recent ruby/tdd training.&lt;/p&gt;

&lt;p&gt;This colleague and I were about to start working on the new version of our main software application. A decision had been taken to rewrite the application with a completely new look and feel, to move to the new (at the time) .NET technology stack and to support MS SQL server as well as MS Access. The company had great success with application up until then because it could be set up and installed by anyone with file sharing permissions, so no need to involve corporate IT. This kind of culture was coming to an end though, so we needed to fit in with what the IT departments demanded.&lt;/p&gt;

&lt;p&gt;We ran it as close to a proper XP project as the business would allow. In particular we were pair programming and we were writing our tests first! Not just unit tests, we were also writing acceptance tests with our &amp;lsquo;customer&amp;rsquo; to help us understand the requirements.&lt;/p&gt;

&lt;p&gt;We used a tool called &lt;a href="http://en.wikipedia.org/wiki/Framework_for_Integrated_Test"&gt;FIT&lt;/a&gt;. This allowed us to create word documents (!!) that contained tables of examples of what the software should do. We would then hook these tables up to some test classes which would run the tests and colour the tables appropriately.&lt;/p&gt;

&lt;p&gt;Using tables to describe the requirements was fantastic. We were able to communicate clearly with our project sponsors about the business rules, using concrete examples to support our understanding.&lt;/p&gt;

&lt;p&gt;Brian Marick&amp;rsquo;s foreword from the book really sums up what the FIT community were trying to do:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A software project is a place where different cultures come together. Some people face towards the business and its concerns; other people face toward the computer and its demands.&lt;/p&gt;

&lt;p&gt;To an expert in financial trading, a &amp;ldquo;bond&amp;rdquo; is something that&amp;rsquo;s tangled up in all sorts of explicit and implicit legal, social, historical and emotional meanings.&lt;/p&gt;

&lt;p&gt;To programmers, a Bond is an object in their program that they&amp;rsquo;re trying to keep from getting too tangled up with other objects, lest their brains explode.&lt;/p&gt;

&lt;p&gt;Somehow these people have to work together, and they do it by creating a shared language. Most of that creating happens through the conversation that threads through the whole project. But some of it happens through writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian Marick, Feb 2005 (foreword of &lt;a href="http://www.pearsoned.co.uk/bookshop/detail.asp?item=100000000079971"&gt;Fit for Developing Software&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At about the same time as this I came across the term &lt;em&gt;Behaviour Driven Development&lt;/em&gt; in &lt;a href="http://blog.daveastels.com/2005/07/a-new-look-at-test-driven-development/"&gt;this post&lt;/a&gt; by Dave Astels. It was about trying to change the focus of TDD from testing to specifying behaviour.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The problem I have with TDD is that its mindset takes us in a different direction… a wrong direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to start thinking in terms of behavior specifications, not verification tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The value of doing this will be thinking more clearly about each behaviour, relying less on testing by class or by method, and having better executable documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since TDD is what it is, and everyone isn’t about to change their meaning of that name (nor should we expect them to), we need a new name for this new way of working… BDD: Behaviour Driven Development.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post really struck a chord with me. I was still getting to grips with TDD but when it had worked well for me it was when I was working how Dave described. The timing of this is a little fuzzy for me now, but it was right around the time I first started to use Ruby and Rails, so I picked up RSpec as my testing tool of choice.&lt;/p&gt;

&lt;p&gt;The FIT toolchain didn&amp;rsquo;t exist in ruby, but in August 2007 the &lt;a href="http://rubyforge.org/pipermail/rspec-devel/2007-August/003756.html"&gt;RSpec Story Runner was released&lt;/a&gt; which gave us the tools to do similar things in ruby. The story runner gave way to &lt;a href="http://cukes.info/"&gt;cucumber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cucumber and Gherkin (the formal language for writing cucumber specifcations), have spread. It is now possible to write Gherkin specifications &lt;a href="https://github.com/cucumber/cucumber-jvm"&gt;on&lt;/a&gt; &lt;a href="https://github.com/cucumber/cucumber-js"&gt;a&lt;/a&gt; &lt;a href="http://www.specflow.org/"&gt;huge&lt;/a&gt; &lt;a href="https://github.com/cucumber/cucumber-cpp"&gt;range&lt;/a&gt; &lt;a href="http://behat.org/"&gt;of&lt;/a&gt; &lt;a href="https://github.com/gabrielfalcao/lettuce"&gt;platforms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think I made a mistake using these tools that many people have done. I used them to write tests. Sometimes they were very brittle tests, &lt;a href="http://tooky.co.uk/stop-writing-scenarios-that-test-everything-through-the-view/"&gt;overly focussed on the view&lt;/a&gt;. Often they were boring lists of instructions. I learnt to be more &lt;a href="http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html"&gt;declarative&lt;/a&gt;, and my tests became more readable. But&amp;hellip;&lt;/p&gt;

&lt;p&gt;They were still written as tests by me (and my colleagues) for the computer to run. &lt;a href="http://lizkeogh.com/2011/03/04/step-away-from-the-tools/"&gt;BDD isn&amp;rsquo;t about the tools&lt;/a&gt; its about the &lt;a href="http://dannorth.net/2010/08/30/introducing-deliberate-discovery/"&gt;discovery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;BDD enables communication. Our teams are made up of those who need the capabilities some new software will provide, and those who are able to create that software. These people come from different backgrounds, different experiences. Using stories and examples helps to create a shared language which we can then use to explore the problem space and begin to discover the things we don&amp;rsquo;t know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cucumber and Full Stack Testing</title>
    <link rel="alternate" href="http://tooky.co.uk/cucumber-and-full-stack-testing/"/>
    <id>http://tooky.co.uk/cucumber-and-full-stack-testing/</id>
    <published>2013-01-18T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;There has been two similar questions asked on two different mailing lists I subscribe to (Corey Haines&amp;rsquo; &lt;a title="Build an app with Corey Haines" href="http://www.cleancoders.com/codecast/bawch-episode-1/show"&gt;BAWCH&lt;/a&gt; mailing list, and &lt;a href="http://rubyrogues.com/"&gt;Ruby Rogues&lt;/a&gt; Parley list). Both of these lists are private so I thought it would be worthwhile posting my answer here.&lt;/p&gt;

&lt;p&gt;Both of the questions were concerned with out-side-in development, full-stack integration testing, and how much of the application needs to be tested through the entire system.&lt;/p&gt;

&lt;p&gt;Firstly consider why we write &lt;a href="http://cukes.info/"&gt;cucumber&lt;/a&gt; scenarios (or &lt;a href="http://fitnesse.org/"&gt;fitnesse&lt;/a&gt; test cases). These tests are business facing acceptance tests. They are a medium through which we can engage with the business people on our team and to help us understand how the system should behave. They give us an opportunity to check &lt;em&gt;our&lt;/em&gt; understanding of what the system should do &amp;mdash; to check the &lt;em&gt;business&lt;/em&gt;&amp;rsquo;s understanding of what the system should do. We automate these tests to give the business confidence that the system behaves as expected.&lt;/p&gt;

&lt;p&gt;Full-stack, end-to-end, integration tests are there to give us confidence that the system fits together correctly, that we have all the different pieces in place, and they are able to talk to each other.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very easy to conflate these two concerns. I have worked on many systems where the business facing acceptance tests were also the end-to-end integration tests. The test runs end up being slow, and the tests are cumbersome to work with.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been talking about this with &lt;a href="https://twitter.com/mattwynne"&gt;Matt Wynne&lt;/a&gt; and he drew the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Business Facing Acceptance Tests vs End-To-End Tests" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/business-facing-vs-end-to-end.png" /&gt;&lt;/p&gt;

&lt;p&gt;The circle on the left represents the tests that we would write in cucumber (or fitnesse). The circle on the right the tests which exercise the whole system end-to-end. In the centre we have the intersection &amp;mdash; our cucumber scenarios which we run end-to-end against the whole system.&lt;/p&gt;

&lt;p&gt;The key thing is that your business acceptance tests do not all have to drive the whole system end-to-end. We only a need a few scenarios to go end-to-end to give us the confidence the system as a whole is working. We can also write system tests, that aren&amp;rsquo;t part of the acceptance suite, to test specific integrations&lt;/p&gt;

&lt;p&gt;Try to write acceptance tests that directly drive the domain objects. Use these to accurately describe your application&amp;rsquo;s behaviour. Focus them on the behaviour by not having them integrate the UI and the database.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Exploring Harmony for javascript BDD with RSpec</title>
    <link rel="alternate" href="http://tooky.co.uk/exploring-harmony-for-unit-testing-with-rspec/"/>
    <id>http://tooky.co.uk/exploring-harmony-for-unit-testing-with-rspec/</id>
    <published>2010-03-02T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;We try to BDD all of our production code, but the one area we always seem to struggle with is our javascript. There are various test/spec frameworks for javascript, but we&amp;rsquo;ve never quite found one we&amp;rsquo;ve been totally happy with.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a fair amount of interest lately in a new ruby gem which allows you to execute javascript against a DOM from within a ruby process. &lt;a href="http://github.com/mynyml/harmony"&gt;Harmony&lt;/a&gt; uses &lt;a href="http://github.com/jbarnette/johnson/"&gt;Johnson&lt;/a&gt; a ruby wrapper for the &lt;a href="http://www.mozilla.org/js/spidermonkey/"&gt;Mozilla SpiderMonkey&lt;/a&gt; javascript runtime.&lt;/p&gt;

&lt;p&gt;To get started figuring out how I might be able to integrate harmony into my workflow, I&amp;rsquo;ve created a very simple &lt;a href="http://gist.github.com/319235"&gt;project&lt;/a&gt; which uses rspec to make some very simple assertions about javascript behaviour.&lt;/p&gt;

&lt;p&gt;&lt;script src="http://gist.github.com/319235.js?file=rspec_with_harmony.rb"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The 3rd and 4th specs are probably the most interesting. They show how how you can use an HTML fixture file, and load the javascript you want to test. This feels like a nice way of isolating your javascript, and would probably encourage me to write much more modular javascript.&lt;/p&gt;

&lt;p&gt;Please fork the &lt;a href="http://gist.github.com/319235"&gt;gist&lt;/a&gt; and play with some more detailed specs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Getting started with Cucumber and Sinatra</title>
    <link rel="alternate" href="http://tooky.co.uk/getting-started-with-cucumber-and-sinatra/"/>
    <id>http://tooky.co.uk/getting-started-with-cucumber-and-sinatra/</id>
    <published>2009-02-05T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; Sinatra and cucumber integration has changed now, Rob Holland updated the &lt;a href="https://github.com/cucumber/cucumber/wiki/sinatra"&gt;wiki&lt;/a&gt; to reflect it. There is also a more full featured example on his &lt;a href="http://github.com/robholland/cucumber/commit/0e12d8100ca8541af014abe6a480c53a90b6aebd"&gt;branch&lt;/a&gt; of cucumber. I&amp;rsquo;ve updated the blog to reflect that.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://sinatra.github.com"&gt;Sinatra&lt;/a&gt; is probably the most popular ruby micro web framework at the moment. Its simple dsl for quickly creating web apps, it give you &amp;ldquo;just enough&amp;rdquo; framework to get things done.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://cukes.info"&gt;Cucumber&lt;/a&gt; is that latest development from the &lt;a href="http://dannorth.net/introducing-bdd"&gt;BDD&lt;/a&gt; / &lt;a href="http://rspec.info"&gt;RSpec&lt;/a&gt; guys. &lt;a href="http://cukes.info"&gt;Cucumber&lt;/a&gt; lets you describe the behaviour of your software in plain text. These files then serve as automated tests and documentation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been considering using both of these tools for an upcoming project so I wanted to make sure they worked happily together. A quick google seemed to suggest that some work had been done, but I could find a tutorial for getting up and running. Happily the latest releases of Cucumber (and &lt;a href="http://github.com/brynary/webrat/tree/master"&gt;Webrat&lt;/a&gt;) have Sinatra support built in so its really very easy!&lt;/p&gt;

&lt;p&gt;With cucumber you write your plain text specifications in terms of &amp;lsquo;features&amp;rsquo;, by convention they are in a features directory with the .feature extension. So for our purposes we will start with a very simple feature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Feature: view pages

  Scenario: Home page
    Given I am viewing "/"
    Then I should see "Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run our feature (and test our code against it) is as simple as &lt;code&gt;cucumber feature/home.feature&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="cucumber pending steps" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Cucumber parses the feature and looks for matching step definitions. As we can see in the screenshot we need to implement the steps in our feature so cucumber knows how to run it. Step definitions are implemented in ruby.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;Given /^I am viewing "(.+)"$/ do |url|
  visit(url)
end

Then /^I should see "(.+)"$/ do |text|
  response_body.should =~ Regexp.new(Regexp.escape(text))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two simple steps make use of webrat to request the url from our app and check that the response contains the text we&amp;rsquo;re looking for.&lt;/p&gt;

&lt;p&gt;&lt;img alt="cucumber failing without webrat" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber2.png" /&gt;&lt;/p&gt;

&lt;p&gt;The feature is currently failing as a method we have used in our step definition doesn&amp;rsquo;t exist. &lt;code&gt;visit&lt;/code&gt; is a method from webrat so we need to configure cucumber&amp;rsquo;s environment to use webrat. Webrat has a &lt;code&gt;SinatraSession&lt;/code&gt; specifically for testing sinatra web apps. We will also need to require the RSpec expectations as we are using them to check the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'spec/expectations'
require 'webrat'
Webrat.configure do |config|
  config.mode = :sinatra
end

World do
  Webrat::SinatraSession.new
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the scenario again, and we see that everything is hooked up properly and the scenario is failing (as expected because we haven&amp;rsquo;t written any code).&lt;/p&gt;

&lt;p&gt;&lt;img alt="cucumber failing no code" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now we have our failing scenario we can start putting together our web app and make sure we&amp;rsquo;re running with a green light!&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'sinatra'

get '/' do
  "Hello, world!"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we run out scenario again unfortunately it still fails, we need to hook cucumber up to our app.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'spec/expectations'
require 'webrat'
Webrat.configure do |config|
  config.mode = :sinatra
end

World do
  Webrat::SinatraSession.new
end

require File.dirname(__FILE__) + '/../../hello''
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally running cucumber gives us that nice green feeling.&lt;/p&gt;

&lt;p&gt;&lt;img alt="green cucumber" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber4.png" /&gt;&lt;/p&gt;

&lt;p&gt;The only thing left to do is to add a rake file to run our features for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;require 'rubygems'
require 'cucumber/rake/task'

Cucumber::Rake::Task.new(:features) do |t|
  t.cucumber_opts = "--format pretty"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="rake features" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/cucumber5.png" /&gt;&lt;/p&gt;

&lt;p&gt;All of the code for this getting started guide is available from &lt;a href="http://gist.github.com/58647"&gt;gist&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
