<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steve Tooke - tdd</title>
  <id>http://tooky.co.uk/</id>
  <link href="http://tooky.co.uk/tags/tdd/"/>
  <link href="http://tooky.co.uk/tags/tdd.xml" rel="self"/>
  <updated>2014-12-19T00:00:00+00:00</updated>
  <entry>
    <title>Your tests want you to change your design</title>
    <link rel="alternate" href="http://tooky.co.uk/your-tests-want-you-to-change-your-design/"/>
    <id>http://tooky.co.uk/your-tests-want-you-to-change-your-design/</id>
    <published>2014-12-19T00:00:00+00:00</published>
    <updated>2014-12-19T11:59:48+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I came across an interesting post by &lt;a href="https://twitter.com/brandonhilkert"&gt;Brandon Hilkert&lt;/a&gt; looking at &lt;a href="http://brandonhilkert.com/blog/a-ruby-refactor-exploring-dependency-injection-options/"&gt;the
differences between constructor and setter dependency injection&lt;/a&gt;. It&amp;rsquo;s
a great introduction to the differences between the two, and his example
illustrates them well. Please go and read it first.&lt;/p&gt;

&lt;p&gt;Brandon&amp;rsquo;s example gets started when he realises that the tests he wants to write
are difficult:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[A] thing that bothered me was the difficulty simulating different pricing
tiers and customer usage&amp;hellip;What if I wanted to change the ceiling of that
tier next month? I&amp;rsquo;d have to come in here and adjust the stats being created
until it totalled something above the adjustment. It just felt weird..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He uses this as an example of how we can use dependency injection to use
different collaborators in tests so we get more control over the context our
objects are running in.&lt;/p&gt;

&lt;p&gt;The solution he settles on is to use setter injection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;StripeEvent&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceCreated&lt;/span&gt;
    &lt;span class="kp"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:usage_service&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:payload&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;
        &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="n"&gt;additional_charges_in_cents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
      &lt;span class="no"&gt;Billing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;
      &lt;span class="n"&gt;usage_service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_30_days&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage_service&lt;/span&gt;
      &lt;span class="vi"&gt;@usage_service&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Billing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;stripe_id: &lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"customer"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He&amp;rsquo;s now able to take an initialized object and using the &lt;code&gt;attr_writer
:usage_service&lt;/code&gt; he can swap in a stub implementation of the usage service and
tightly control what is returned. It allows him to ignor the &lt;em&gt;incidental detail&lt;/em&gt;
of creating a &lt;code&gt;Stat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When tests are difficult to write they are a great indicator that there&amp;rsquo;s
something about our design that we should take another look at. I&amp;rsquo;m not sure
that adding the setter method really changes the design, it just hides a little
complexity when writing our tests.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the sequence diagram for the original code:&lt;/p&gt;

&lt;p&gt;&lt;img alt="original sequence" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/listening_to_tests_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Using the setter to inject a usage service shortcuts creating the usage service,
but is &lt;em&gt;only&lt;/em&gt; relevant in the tests &amp;mdash; in normal usage the design is
&lt;em&gt;exactly&lt;/em&gt; the same.&lt;/p&gt;

&lt;p&gt;&lt;img alt="setter sequence" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/listening_to_tests_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;The tests were hinting that we had too many responsibilities, but this sequence
diagram really highlights this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve a user&lt;/li&gt;
&lt;li&gt;Get the users usage for the last 30 days&lt;/li&gt;
&lt;li&gt;Get the billing tier for that usage&lt;/li&gt;
&lt;li&gt;Create an invoice item for the billing tier amount&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last one is the most important. We want to create an additional invoice item
for the user, based on their usage in the last 30 days., and 
sequence diagram looked something like:&lt;/p&gt;

&lt;p&gt;&lt;img alt="extracted dependencies sequence" src="https://dl.dropboxusercontent.com/u/41915/tooky-images/listening_to_tests_3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Based on this idea I changed the tests to focus the object on the responsibility
we care about:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"creating an invoice"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"data"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"object"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"customer"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:level1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:tier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:additional_charges_in_cents&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:level2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:tier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:additional_charges_in_cents&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'adds invoice item based on usage'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:last_30_days_for_stripe_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
      &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="mi"&gt;1900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;StripeEvent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceCreated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'adds next level charge for usage'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:last_30_days_for_stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="s2"&gt;"stripe_brandon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="mi"&gt;4900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;StripeEvent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceCreated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are injecting a new dependency, a &lt;code&gt;billing_tier_service&lt;/code&gt;. We&amp;rsquo;re imagining
that this dependency will take on the responsibility of giving us back the
correct billing tier for the customer that stripe has asked us for. Our tests
will just check we creating the InvoiceItem correctly, and the resulting code
is little simpler.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;StripeEvent&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceCreated&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:payload&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:billing_tier_service&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:some_sensible_default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;
      &lt;span class="vi"&gt;@billing_tier_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
      &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvoiceItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;customer: &lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;amount: &lt;/span&gt;&lt;span class="n"&gt;additional_charges_in_cents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;currency: &lt;/span&gt;&lt;span class="s2"&gt;"usd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Usage charges"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
      &lt;span class="n"&gt;tier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billing_tier_service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_30_days_for_stripe_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;tier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additional_charges_in_cents&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stripe_id&lt;/span&gt;
      &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"customer"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this leaves us with more work to do. We will still need to build the
&lt;code&gt;billing_tier_service&lt;/code&gt;, to return the current tier for the customer. But this
should be simpler, and focus purely on which level is returned based on usage.&lt;/p&gt;

&lt;p&gt;The trade-off is that we now have to deal with more objects in our system, but
each responsibility is in a single place, and our tests are isolated from
incidental changes in other parts of the system, e.g. changing the tier pricing.&lt;/p&gt;

&lt;p&gt;Test driven development is about listening to your tests. When something is hard
to test it&amp;rsquo;s usually a good indicator that you should change something in your
design. Use it as an opportunity to reevaluate design &amp;mdash; and don&amp;rsquo;t be
afraid of breaking out some boxes and arrows on the whiteboard.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I think you should go to a code retreat</title>
    <link rel="alternate" href="http://tooky.co.uk/why-i-think-you-should-go-to-a-coderetreat/"/>
    <id>http://tooky.co.uk/why-i-think-you-should-go-to-a-coderetreat/</id>
    <published>2010-03-17T00:00:00+00:00</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;Last Saturday I went along to the UK leg of &lt;a href="http://coreyhaines.com/"&gt;Corey Haines&lt;/a&gt; &lt;a href="http://www.coderetreat.com/how-it-works.html"&gt;Code Retreat tour&lt;/a&gt;. Apart from the early start it was a really interesting day, and I really enjoyed the chance to &lt;a href="http://twitter.com/despo"&gt;pair&lt;/a&gt; &lt;a href="http://twitter.com/morty_uk"&gt;with&lt;/a&gt; &lt;a href="http://twitter.com/duncanbutler"&gt;lots&lt;/a&gt; of new people.&lt;/p&gt;

&lt;p&gt;The day was pretty tiring, pairing is always an intense experience, but I definitely learnt quite a lot. Its amazing how much fun working on the same problem several times in a row is, and how different approaches affect the way you think about it. By repeating the problem you allow your brain to concentrate on how you are solving it, rather than the problem itself. This gives you a really different perspective and is something I want to explore more.&lt;/p&gt;

&lt;p&gt;There were so many things that I took away from the day, some of them are already changing my approach to building software:&lt;/p&gt;

&lt;h3&gt;45 minutes is a really short amount of time&lt;/h3&gt;

&lt;p&gt;The format of the code retreat is to work on the problem with a pair for 45 minutes. When the time is up, you delete all your code, and take break. Spend 15 minutes grabbing a coffee, reflecting on what you&amp;rsquo;ve done, and finding your next pair. Rinse and repeat.&lt;/p&gt;

&lt;p&gt;Every 45 minute session flew by. Even so, with each pairing I was surprised at how far we&amp;rsquo;d managed to get. But what really surprised me, was how useful the short break and change of partner proved to be. The break gave you a real chance to reconsider your assumptions. That little bit of perspective was great in kick starting the next session.&lt;/p&gt;

&lt;p&gt;It really surprised me how easy it was to swap pairs. Granted, everybody had been thinking about the same problem. But everyone was using a different approach, and sometimes a different language. The context switching didn&amp;rsquo;t seem to affect anybody. The new combinations brought new ideas and really contributed to the success of the day.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been trying the &lt;a href="http://www.pomodorotechnique.com/"&gt;pomodoro technique&lt;/a&gt; at work. I know I&amp;rsquo;ve been a bit resistant to stopping when the timer goes. I always feel like I should just get the rest of my ideas out before I take break, but based on my experience at code retreat, I think the short break from the problem will turn out to be a real benefit. I&amp;rsquo;m determined to try and do it properly and see how it works out.&lt;/p&gt;

&lt;p&gt;I also want to try and swap pairs more often. I think that the new perspective a new pair will bring to a problem will really help to come to the best solution.  I&amp;rsquo;m not sure about every hour, but once or twice a day should be achievable.&lt;/p&gt;

&lt;h3&gt;Pairing is a great way to share insights and learning&lt;/h3&gt;

&lt;p&gt;Leading on from the new perspective a new pair brings is also the amount of shared learning that happens when your pairing. I learnt something from everyone I paired with. Not just how to approach the problem, but new things about the language, the tools. In a team, pairing will really help to bring every team member up to speed on any new part of the code base or library added. Switching often will make this happen even faster.&lt;/p&gt;

&lt;h3&gt;If you don&amp;rsquo;t need the infrastructure yet, don&amp;rsquo;t build it&lt;/h3&gt;

&lt;p&gt;Why do you need to build a class to make your first spec pass? Why not just write the code you need in the spec? Then write the next spec, and the code to pass it in that spec. As soon as you start to see shared behaviour extract a method. When specs are using the same state and the same methods extract a class.&lt;/p&gt;

&lt;p&gt;Working like this is &lt;em&gt;really&lt;/em&gt; hard, but its amazing how the design you need just starts to show itself. &lt;/p&gt;

&lt;h3&gt;Look at one behaviour at a time by isolating it using canned responses&lt;/h3&gt;

&lt;p&gt;Most of the code we write doesn&amp;rsquo;t split up nicely into discreet chunks of behaviour. We build systems that rely on several pieces all working together to produce complicated behaviour. Complexity is difficult to define, so to make it easier we need to try to isolate the part that we&amp;rsquo;re interested in right now.  We can use simple objects that return canned responses, this allows us to consider only the behaviour we care about now.&lt;/p&gt;

&lt;h3&gt;Keeping things really simple is really hard&lt;/h3&gt;

&lt;p&gt;Corey was continually encouraging us to keep things simple. Its amazing how often you think your doing something as simply as possible, and then someone comes along and makes it even simpler. Simple is good, it allows you to work on one thing at a time, and not get bogged down in things that don&amp;rsquo;t matter &lt;em&gt;right now&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;A lot of the direction at code retreat was about ways to keep things simple, to specify only the smallest piece of behaviour. Writing the code in the spec at first, and using &amp;lsquo;doubles&amp;rsquo; to isolate behaviour are both great techniques to help you do that.&lt;/p&gt;

&lt;p&gt;One of the main things I&amp;rsquo;m taking away from code retreat is to work hard at writing smaller, more focussed specs.&lt;/p&gt;

&lt;p&gt;If there&amp;rsquo;s a &lt;a href="http://www.coderetreat.com/"&gt;code retreat&lt;/a&gt; near you I really encourage you to go along. If there isn&amp;rsquo;t join the &lt;a href="http://coderetreat.ning.com/"&gt;community&lt;/a&gt; and see if there&amp;rsquo;s anyone else who would be interested in helping get one organised.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to say thank you to &lt;a href="http://coreyhaines.com/"&gt;Corey Haines&lt;/a&gt;, the sponsors &lt;a href="http://riverglide.com/"&gt;RiveGlide&lt;/a&gt; and &lt;a href="http://edendevelopment.co.uk/"&gt;Eden Development&lt;/a&gt;, all of the attendees, and of course &lt;a href="http://www.bletchleypark.org.uk/"&gt;Bletchley Park&lt;/a&gt; and the &lt;a href="http://www.tnmoc.org/"&gt;The National Museum of Computing&lt;/a&gt; for making the day such a great success.&lt;/p&gt;
</content>
  </entry>
</feed>
