<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steve Tooke - ruby</title>
  <id>http://tooky.co.uk/</id>
  <link href="http://tooky.co.uk/tags/ruby/"/>
  <link href="http://tooky.co.uk/tags/ruby.xml" rel="self"/>
  <updated>2014-06-11T00:00:00Z</updated>
  <entry>
    <title>Using charklock_holmes on Heroku</title>
    <link rel="alternate" href="http://tooky.co.uk/using-charklock_holmes-on-heroku/"/>
    <id>http://tooky.co.uk/using-charklock_holmes-on-heroku/</id>
    <published>2014-06-11T00:00:00Z</published>
    <updated>2014-06-11T13:58:54+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/brianmario/charlock_holmes"&gt;&lt;code&gt;charlock_holmes&lt;/code&gt;&lt;/a&gt; is a useful gem if you have to deal with
user supplied data which may come in a variety of text-encodings. Not only does
it enable you to detect the encoding of a string, but it also allows you to
transcode the string to a different encoding.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;charklock_holmes&lt;/code&gt; uses &lt;a href="http://site.icu-project.org"&gt;&lt;code&gt;libicu&lt;/code&gt;&lt;/a&gt; to deal with string encoding.&lt;/p&gt;

&lt;p&gt;Unfortunately, the default &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; buildpack for Ruby doesn&amp;rsquo;t include
&lt;code&gt;libicu&lt;/code&gt; which prevents bundler from being able to compile &lt;code&gt;charklock_holmes&lt;/code&gt;
C-extension.&lt;/p&gt;

&lt;p&gt;There have been a few attempts at solving this problem, most of which are
discussed over on &lt;a href="http://stackoverflow.com/questions/18926574/how-to-install-charlock-holmes-dependency-libicu-dev-on-heroku"&gt;stack overflow&lt;/a&gt;. The &lt;a href="http://stackoverflow.com/a/18926982/223996"&gt;accepted
answer&lt;/a&gt; is a common solution, which relies on using
a version of the gem which includes a bundled version of &lt;code&gt;libicu&lt;/code&gt;. While this
works, it does result in very slow build times both on heroku, and locally when
doing a bundle install.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/a/20507705/223996"&gt;Another solution&lt;/a&gt; uses a custom version of the ruby
buildpack which includes &lt;code&gt;libicu&lt;/code&gt; &amp;mdash; while this is a simple solution it
relies on the maintainer of that solution keeping it up to date with heroku&amp;rsquo;s
ruby buildpack.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/a/22662875/223996"&gt;My favourite solution&lt;/a&gt; seems to move in the right direction,
it uses &lt;a href="https://github.com/ddollar/heroku-buildpack-multi"&gt;&lt;code&gt;heroku-buildpack-multi&lt;/code&gt;&lt;/a&gt; and
&lt;a href="https://github.com/ddollar/heroku-buildpack-apt"&gt;&lt;code&gt;heroku-buildpack-apt&lt;/code&gt;&lt;/a&gt; to install &lt;code&gt;libicu&lt;/code&gt; using apt.
Unfortunately it uses a forked version of the &lt;code&gt;heroku-buildpack-apt&lt;/code&gt; which
adds specific behaviour for &lt;code&gt;charlock_holmes&lt;/code&gt; and where &lt;code&gt;bundler&lt;/code&gt; can find the
version of &lt;code&gt;libicu&lt;/code&gt; installed by &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My solution builds upon the previous solution, but rather than use a custom
version of the &lt;code&gt;heroku-buildpack-apt&lt;/code&gt; I have added one more buildpack into the
mix &amp;mdash; &lt;a href="https://github.com/timolehto/heroku-bundle-config"&gt;&lt;code&gt;heroku-bundle-config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This buildpack allows you to configure your heroku bundler config in your
repository in the &lt;code&gt;.heroku-bundle&lt;/code&gt; directory. During the build it will move this
directory to &lt;code&gt;.bundle&lt;/code&gt;, and most importantly, make sure that all &lt;code&gt;/app&lt;/code&gt; paths
point correctly to the temporary build directory.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a &lt;a href="https://github.com/tooky/heroku-charlock-holmes"&gt;sample project&lt;/a&gt;, that can be &lt;a href="http://heroku-charlock-holmes.herokuapp.com"&gt;deployed to heroku&lt;/a&gt; â€“ the only thing
you need to do is ensure that you have set the &lt;code&gt;BUILDPACK_URL&lt;/code&gt; to
&lt;code&gt;https://github.com/ddollar/heroku-buildpack-multi.git&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ heroku config:set BUILDPACK_URL=https://github.com/ddollar/heroku-buildpack-multi.git
&lt;/pre&gt;

&lt;p&gt;When you push to heroku, this buildpack will check for a &lt;code&gt;.buildpacks&lt;/code&gt; file,
which specify the different buildpacks you want to use:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;https://github.com/ddollar/heroku-buildpack-apt
https://github.com/timolehto/heroku-bundle-config
https://github.com/heroku/heroku-buildpack-ruby
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;heroku-buildpack-apt&lt;/code&gt; will then check for an &lt;code&gt;Aptfile&lt;/code&gt; and install the
specified packages:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;libicu-dev
&lt;/pre&gt;

&lt;p&gt;Finally, you need to configure you &lt;code&gt;.heroku-bundle/config&lt;/code&gt; to make sure that
&lt;code&gt;bundler&lt;/code&gt; can use your newly installed version of &lt;code&gt;libicu&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;---
BUNDLE_FROZEN: '1'
BUNDLE_PATH: vendor/bundle
BUNDLE_BIN: vendor/bundle/bin
BUNDLE_JOBS: 4
BUNDLE_WITHOUT: development:test
BUNDLE_DISABLE_SHARED_GEMS: '1'
BUNDLE_BUILD__CHARLOCK_HOLMES: --with-icu-lib=/app/.apt/usr/lib --with-icu-include=/app/.apt/usr/include
&lt;/pre&gt;

&lt;p&gt;That should be all you need.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using `direnv` and `chruby` together</title>
    <link rel="alternate" href="http://tooky.co.uk/using-direnv-and-chruby-together/"/>
    <id>http://tooky.co.uk/using-direnv-and-chruby-together/</id>
    <published>2014-06-10T00:00:00Z</published>
    <updated>2014-06-10T07:07:17+01:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been using &lt;a href="https://github.com/postmodern/chruby"&gt;&lt;code&gt;chruby&lt;/code&gt;&lt;/a&gt; to manage my ruby versions for a few
months &amp;mdash; I like it&amp;rsquo;s lightweight approach.&lt;/p&gt;

&lt;p&gt;A combination of &lt;a href="http://bundler.io"&gt;bundler&amp;rsquo;s&lt;/a&gt; &lt;a href="http://robots.thoughtbot.com/use-bundlers-binstubs"&gt;binstubs&lt;/a&gt;, the introduction
of rails 4 introducing the &lt;code&gt;bin&lt;/code&gt; directory and trying to &lt;a href="http://12factor.net"&gt;use the
environment to configure my apps&lt;/a&gt; has meant I wanted a way to
to manage my environment on a per project basis.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried using &lt;a href="https://github.com/bkeepers/dotenv"&gt;dotenv&lt;/a&gt;, which works well for ruby projects, and for
setting environment variables to be used by your app &amp;mdash; but, as far as
I can tell, it doesn&amp;rsquo;t actually modify your environment. So setting your &lt;code&gt;PATH&lt;/code&gt;
to select the correct binary, e.g. &lt;code&gt;bin/rails&lt;/code&gt; in a rails app, won&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/zimbatm/direnv"&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;direnv&lt;/code&gt; looks for a &lt;code&gt;.envrc&lt;/code&gt; file in a directory and
loads any thing there into your environment. You have to specifically allow
direnv to load a file, and it tracks modifications to the file. It&amp;rsquo;s very nice.&lt;/p&gt;

&lt;p&gt;Unfortunately, I had a problem using it alongside &lt;code&gt;chruby&lt;/code&gt; &amp;mdash; everytime
I entered a directory &lt;code&gt;direnv&lt;/code&gt; would do it&amp;rsquo;s thing and then &lt;code&gt;chruby&lt;/code&gt; would
follow suit, and I could never quite get the result I wanted! For example, I&amp;rsquo;d
have the right version of ruby, but the wrong &lt;code&gt;PATH&lt;/code&gt; &amp;amp;mdash or the right &lt;code&gt;PATH&lt;/code&gt;
with the wrong ruby.&lt;/p&gt;

&lt;p&gt;To fix this I removed &lt;code&gt;chruby&lt;/code&gt;&amp;rsquo;s auto switching feature from my default
environment, and based on a suggestion &lt;a href="https://github.com/zimbatm/direnv/issues/98"&gt;here&lt;/a&gt; added a &lt;code&gt;use_ruby&lt;/code&gt;
function to my &lt;code&gt;~/.direnvrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/share/chruby/chruby.sh

&lt;span class="c"&gt;# use ruby [version]&lt;/span&gt;
use_ruby&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="nv"&gt;$ver&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -f .ruby-version &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;ver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat .ruby-version&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;fi
  if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="nv"&gt;$ver&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;Unknown ruby version
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
  &lt;span class="k"&gt;fi
  &lt;/span&gt;chruby &lt;span class="nv"&gt;$ver&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This checks for a &lt;code&gt;.ruby-version&lt;/code&gt; file, and, if it finds one, defers to &lt;code&gt;chruby&lt;/code&gt;
to load the correct ruby environment.&lt;/p&gt;

&lt;p&gt;I can now use this function in a project &lt;code&gt;.envrc&lt;/code&gt; to load ruby before I modify
the path:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;use ruby
PATH_add bin
&lt;/pre&gt;

&lt;p&gt;You can also pass a ruby version to the &lt;code&gt;use_ruby&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;use ruby 2.1
PATH_add bin
&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want to use a &lt;code&gt;.ruby-version&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This seems to work really well. The only downside is that I don&amp;rsquo;t have
autoswitching of ruby versions anymore &amp;mdash; unless I decide that&amp;rsquo;s what
I want. I don&amp;rsquo;t think its too bad to have to be explicit about that.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Delegation is not inheritance</title>
    <link rel="alternate" href="http://tooky.co.uk/delegation-is-not-inheritance/"/>
    <id>http://tooky.co.uk/delegation-is-not-inheritance/</id>
    <published>2012-08-08T00:00:00Z</published>
    <updated>2013-12-18T10:29:53+00:00</updated>
    <author>
      <name>Steve Tooke</name>
    </author>
    <content type="html">&lt;p&gt;On the train home last night I watched the excellent &lt;a href="https://peepcode.com/products/play-by-play-jimweirich-ruby"&gt;Jim Weirich Play-by-play&lt;/a&gt; from &lt;a href="https://peepcode.com/"&gt;PeepCode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the screencast Jim develops a library that &amp;ldquo;protects against unauthorized data model modification by users in less-privileged roles.&amp;rdquo; The screencast provides a great insight into the way Jim approaches problems, designs apis, and how he&amp;rsquo;s customised his environment to suit the way he works.&lt;/p&gt;

&lt;p&gt;His approach is to build a proxy object which wraps the object to be updated, and provides a whitelist for fields which can be updated. He also inadvertantly demonstrates an easy mistake to make when using proxy objects.&lt;/p&gt;

&lt;p&gt;Here is a simplified version of Jim&amp;rsquo;s solution -  without any of the api for creating / finding proxies - which we will use to demonstrate this pitfall and its effects.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'delegate'&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProtectionProxy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;writable_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@writable_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writable_fields&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_with?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@writable_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This approach works great for silently dropping calls to the accessor methods that are not in the provided whitelist. Here are some rspec examples which show how it works.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec-given'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'protection_proxy'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:membership_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;ProtectionProxy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Jim"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"jim@somewhere"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Beginner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="no"&gt;Given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:proxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;ProtectionProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:membership_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="no"&gt;Then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Jim"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"when modifiying a writable field"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;When&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Advanced"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="no"&gt;Then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;membership_level&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Advanced"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;"when modifiying a non-writable field"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;When&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Joe"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="no"&gt;Then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Jim"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Now if we imagine we have a rails project, we can create a proxy to wrap our ActiveRecord object, and specify an attribute whitelist.  This should then prevent mass-assignment of any non-whitelist attributes - it could be used in a controller like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ProtectionProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# happy path&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="c1"&gt;# error&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Unfortunately this won&amp;rsquo;t work as we might expect.&lt;/p&gt;

&lt;p&gt;Proxying like this is a great way to add new behaviour to existing objects, without modifying them - or creating new subclasses. but there is one thing to be aware of when you are using delegation in this way.&lt;/p&gt;

&lt;p&gt;Methods called on the wrapped object have &lt;strong&gt;no&lt;/strong&gt; knowledge of the methods in the proxy object.&lt;/p&gt;

&lt;p&gt;So what happens when we call &lt;code&gt;proxy.update_attributes&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The proxy object immediately delegates that method call to the user object, it will call &lt;code&gt;user.update_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you have used ActiveRecord, you will be aware of the way that &lt;code&gt;ActiveRecord::Base#update_attrbiutes&lt;/code&gt; will make use of the accessor methods on its instances to set the field names.&lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;user.update_attributes name: &amp;#39;Joe&amp;#39;&lt;/code&gt; will call &lt;code&gt;user.name = &amp;#39;Joe&amp;#39;&lt;/code&gt;, not the accessor methods on the proxy.&lt;/p&gt;

&lt;p&gt;&lt;img alt="update attributes sequence diagram" src="http://dl.dropbox.com/u/41915/update_attributes_sequence_diagram.png" /&gt;&lt;/p&gt;

&lt;p&gt;As we are not calling the accessor methods on the proxy, we aren&amp;rsquo;t filtering out the fields that don&amp;rsquo;t appear in the whitelist and our attribute protection won&amp;rsquo;t work when we use &lt;code&gt;update_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is another example. &lt;code&gt;Capitalise&lt;/code&gt; wraps an object and provides a upper case version of its name method.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'delegate'&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Capitalise&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="vi"&gt;@source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;
    &lt;span class="s2"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'john'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;capital_john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capitalise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; "Hello, john"&lt;/span&gt;
&lt;span class="n"&gt;capital_john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greet&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; "Hello, john"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;greet&lt;/code&gt; is defined in the &lt;code&gt;Person&lt;/code&gt; class, when it calls &lt;code&gt;name&lt;/code&gt; it will always call &lt;code&gt;Person#name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This has caught me out a couple times. It&amp;rsquo;s so easy in ruby to create proxy objects or decorators that its easy to forget that you have a different object.&lt;/p&gt;

&lt;p&gt;One solution is to implement a version of &lt;code&gt;update_attributes&lt;/code&gt; on the proxy object.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProtectionProxy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;writable_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;
    &lt;span class="vi"&gt;@writable_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writable_fields&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="vi"&gt;@writable_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="vi"&gt;@object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_attributes&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Here we add an &lt;code&gt;update_attributes&lt;/code&gt; method to the &lt;code&gt;ProtectionProxy&lt;/code&gt; class - this only allows attributes allowed by the whitelist through to &lt;code&gt;User#update_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://peepcode.com/products/play-by-play-jimweirich-ruby"&gt;screencast&lt;/a&gt; ends with a note that Jim noticed this error later after recording of the screen cast finished. Jim&amp;rsquo;s complete solution, including the nice api, can be found on &lt;a href="https://github.com/jimweirich/protection_proxy"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/3294185.js"&gt;Here is the whole of the &lt;code&gt;ProxyProtection&lt;/code&gt; implementation&lt;/a&gt;, with rspec examples.&lt;/p&gt;
</content>
  </entry>
</feed>
